{
    "version": "https://jsonfeed.org/version/1",
    "title": "Keep Moving • All posts by \"电脑硬件知识\" category",
    "description": "🌸学习笔记🌸",
    "home_page_url": "http://qianqiu-cell.github.io",
    "items": [
        {
            "id": "http://qianqiu-cell.github.io/2024/10/20/Computer/docker/",
            "url": "http://qianqiu-cell.github.io/2024/10/20/Computer/docker/",
            "title": "docker",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZQ==\">https://yeasy.gitbook.io/docker_practice</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlSV3NlMUVTRC8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljaw==\">https://www.bilibili.com/video/BV1YRWse1ESD/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click</span></p>\n<h1 id=\"一-docker简介\"><a class=\"markdownIt-Anchor\" href=\"#一-docker简介\">#</a> 一、Docker 简介</h1>\n<h2 id=\"11-什么是docker\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是docker\">#</a> 1.1 什么是 docker</h2>\n<p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>\n<p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>\n<p><img data-src=\"/images/Computer/docker/1.1.png\" alt=\"\"></p>\n<h2 id=\"12-为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#12-为什么要用docker\">#</a> 1.2 为什么要用 docker</h2>\n<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li>更高效的利用系统资源</li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li>更快速的启动时间</li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li>一致的运行环境</li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。</p>\n<ul>\n<li>持续交付和部署</li>\n</ul>\n<p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>\n<p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成 (Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署 (Continuous Delivery/Deployment) 系统进行自动部署。</p>\n<p>而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p>\n<ul>\n<li>更轻松的迁移</li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li>更轻松的维护和扩展</li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li>对比传统虚拟机总结</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>容器</th>\n<th>虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为 MB</td>\n<td>一般为 GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单机支持上千个容器</td>\n<td>一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"二-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#二-基本概念\">#</a> 二、基本概念</h1>\n<p><img data-src=\"/images/Computer/docker/2.1.jpeg\" alt=\"\"></p>\n<h2 id=\"21-镜像\"><a class=\"markdownIt-Anchor\" href=\"#21-镜像\">#</a> 2.1 镜像</h2>\n<p>我们都知道，操作系统分为<strong>内核</strong> 和<strong>用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 <strong>Docker 镜像（Image），就相当于是一个 root 文件系统</strong>。比如官方镜像 Ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。Docker 镜像<strong>不包含任何动态数据，其内容在构建之后也不会被改变</strong>。</p>\n<h2 id=\"22-容器\"><a class=\"markdownIt-Anchor\" href=\"#22-容器\">#</a> 2.2 容器</h2>\n<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的<strong>类</strong>和<strong>实例</strong>一样，<strong>镜像是静态的定义，容器是镜像运行时的实体</strong>。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>\n<h2 id=\"23-仓库\"><a class=\"markdownIt-Anchor\" href=\"#23-仓库\">#</a> 2.3 仓库</h2>\n<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<strong>Docker Registry</strong> 就是这样的服务。</p>\n<p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（Repository）；每个仓库可以包含多个 <strong>标签</strong>（Tag）；每个标签对应一个镜像。</p>\n<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt; 标签 &gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>\n<p>最常使用的 Registry 公开服务是官方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\"> Docker Hub</span>，这也是默认的 Registry，并拥有大量的高质量的 官方镜像。</p>\n<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。</p>\n<h1 id=\"三-使用镜像\"><a class=\"markdownIt-Anchor\" href=\"#三-使用镜像\">#</a> 三、使用镜像</h1>\n<h2 id=\"31-获取镜像\"><a class=\"markdownIt-Anchor\" href=\"#31-获取镜像\">#</a> 3.1 获取镜像</h2>\n<p>从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker pull <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Docker Registry 地址<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>端口号<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">]</span>仓库名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>标签<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>\n<p>具体的选项可以通过 docker pull --help 命令看到</p>\n</li>\n<li>\n<p>Docker 镜像仓库地址：地址的格式一般是 &lt;域名 / IP&gt;[: 端口号]。默认地址是 Docker Hub (<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>)。</p>\n</li>\n<li>\n<p>仓库名：仓库名是两段式名称，即 &lt;用户名&gt;/&lt; 软件名 &gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker pull ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">18.04</span><span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>ubuntu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7c457f213c76<span class=\"token punctuation\">:</span> Pull complete </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Digest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>152dc042452c496007f07ca9127571cb9c29697f42acbfad72324b2bb2e43c98</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Status<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>docker<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>library<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr></table></figure><h2 id=\"32-列出镜像\"><a class=\"markdownIt-Anchor\" href=\"#32-列出镜像\">#</a> 3.2 列出镜像</h2>\n<p>要想列出已经下载下来的镜像，可以使用  <code>docker image ls</code>  或者  <code>docker images</code>  命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago    <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago   <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago   <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker image ls</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago    <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago   <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago   <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$</pre></td></tr></table></figure><p>列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。</p>\n<p>其他显示 docker 镜像的命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker system df <span class=\"token comment\"># 查看镜像、容器、数据卷所占用的空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker image ls ubuntu <span class=\"token comment\"># 根据仓库名列出镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker image ls ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token comment\">#列出特定的某个镜像</span></pre></td></tr></table></figure><h2 id=\"33-运行镜像\"><a class=\"markdownIt-Anchor\" href=\"#33-运行镜像\">#</a> 3.3 运行镜像</h2>\n<p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 ubuntu:18.04 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span><span class=\"token operator\">-</span>rm ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@e9a46d9a85a7<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># cat /etc/os-release</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NAME<span class=\"token operator\">=</span><span class=\"token string\">\"Ubuntu\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VERSION<span class=\"token operator\">=</span><span class=\"token string\">\"18.04.6 LTS (Bionic Beaver)\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ID<span class=\"token operator\">=</span>ubuntu</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ID_LIKE<span class=\"token operator\">=</span>debian</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PRETTY_NAME<span class=\"token operator\">=</span><span class=\"token string\">\"Ubuntu 18.04.6 LTS\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>VERSION_ID<span class=\"token operator\">=</span><span class=\"token string\">\"18.04\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HOME_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.ubuntu.com/\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SUPPORT_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://help.ubuntu.com/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BUG_REPORT_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://bugs.launchpad.net/ubuntu/\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PRIVACY_POLICY_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>VERSION_CODENAME<span class=\"token operator\">=</span>bionic</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>UBUNTU_CODENAME<span class=\"token operator\">=</span>bionic</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>root@e9a46d9a85a7<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$</pre></td></tr></table></figure><p>docker run 就是运行容器的命令，主要使用到的参数如下</p>\n<ul>\n<li>\n<p>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</p>\n</li>\n<li>\n<p>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。</p>\n</li>\n<li>\n<p>ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。</p>\n</li>\n<li>\n<p>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</p>\n</li>\n</ul>\n<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 18.04.1 LTS 系统。</p>\n<p>最后我们通过 exit 退出了这个容器。</p>\n<p><img data-src=\"/images/Computer/docker/3.1.png\" alt=\"\"></p>\n<h2 id=\"34-删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#34-删除镜像\">#</a> 3.4 删除镜像</h2>\n<p>如果要删除本地的镜像，可以使用 docker image rm 命令，其格式为：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker image rm <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>镜像<span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>镜像<span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>其中，&lt;镜像&gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。我们可以用镜像的完整 ID，也称为长 ID，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用短 ID 来删除镜像。docker image ls 默认列出的就已经是短 ID 了，一般取前 3 个字符以上，只要足够区分于别的镜像就可以了。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker image rm <span class=\"token number\">501</span> <span class=\"token comment\"># 使用短 ID 来删除镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker image rm centos <span class=\"token comment\"># 使用镜像名 & lt; 仓库名 >:&lt; 标签 > 来删除镜像</span></pre></td></tr></table></figure><h2 id=\"35-制作镜像\"><a class=\"markdownIt-Anchor\" href=\"#35-制作镜像\">#</a> 3.5 制作镜像</h2>\n<p>(1) docker commit</p>\n<p>todo</p>\n<p>(2) Dockerfile</p>\n<p>todo</p>\n<h1 id=\"四-操作容器\"><a class=\"markdownIt-Anchor\" href=\"#四-操作容器\">#</a> 四、操作容器</h1>\n<h2 id=\"41-启动容器\"><a class=\"markdownIt-Anchor\" href=\"#41-启动容器\">#</a> 4.1 启动容器</h2>\n<p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</p>\n<p>（1）新建并启动</p>\n<p>所需要的命令主要为 <code>docker run</code> 。</p>\n<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>it ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> bash</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root@c28d053628f4<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># pwd</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>root@c28d053628f4<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">bin</span>   dev  home  lib64  mnt  proc  run   srv  tmp  var</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>boot  etc  lib   media  opt  root  sbin  sys  usr</pre></td></tr></table></figure><p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>\n<p>检查本地是否存在指定的镜像，不存在就从 registry 下载</p>\n</li>\n<li>\n<p>利用镜像创建并启动一个容器</p>\n</li>\n<li>\n<p>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</p>\n</li>\n<li>\n<p>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</p>\n</li>\n<li>\n<p>从地址池配置一个 ip 地址给容器</p>\n</li>\n<li>\n<p>执行用户指定的应用程序</p>\n</li>\n<li>\n<p>执行完毕后容器被终止</p>\n</li>\n</ul>\n<p>（2）启动已终止的容器</p>\n<p>可以利用 <code>docker container start</code>  命令，直接将一个已经终止（exited）的容器启动运行。</p>\n<h2 id=\"42-查看正在运行中的容器\"><a class=\"markdownIt-Anchor\" href=\"#42-查看正在运行中的容器\">#</a> 4.2 查看正在运行中的容器</h2>\n<p>可以通过 <code>docker container ls</code>  或者 <code>docker ps</code>  命令来查看容器信息。不添加 <code>-a</code>  参数表示仅查询正在运行的容器，添加 <code>-a</code>  参数表示查询所有容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f46a0966d2f0   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">2</span> minutes ago   Up <span class=\"token number\">2</span> minutes             pedantic_ride</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED              STATUS                          PORTS     NAMES</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f46a0966d2f0   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">35</span> seconds ago       Up <span class=\"token number\">34</span> seconds                             pedantic_ride</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2017ea1579ba   ubuntu                   <span class=\"token string\">\"bash\"</span>                    About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             heuristic_ritchie</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a6ebe91f0963   ubuntu                   <span class=\"token string\">\"bash\"</span>                    About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             funny_ganguly</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>1ea1d2fdc98f   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             fervent_antonelli</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a22936923b9   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">3</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span> minutes ago                  keen_galois</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>42ef1554542d   ubuntu                   <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">4</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                  affectionate_torvalds</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>af4b52cb7f4d   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">4</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                  modest_ritchie</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">9004e2682944</span>   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">29</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">25</span> minutes ago                 suspicious_shockley</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>f2ee1fb9dbd3   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">36</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">36</span> minutes ago                 focused_ride</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>9de4edc03c66   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">37</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">37</span> minutes ago                 loving_poincare</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>c28d053628f4   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">40</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">37</span> minutes ago                 nifty_diffie</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>482b8943345d   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">41</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">41</span> minutes ago                 agitated_galois</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>e56c41136583   hello<span class=\"token operator\">-</span>world              <span class=\"token string\">\"/hello\"</span>                  <span class=\"token number\">2</span> hours ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span> hours ago                    vibrant_carver</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>066f72347a3b   pytorch<span class=\"token operator\">/</span>pytorch          <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">3</span> days ago           Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> days ago                     dazzling_poitras</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1d4426c8152   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                  confident_edison</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>51dd9da96e61   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                    nervous_williamson</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>9c03918a1e27   pytorch<span class=\"token operator\">/</span>pytorch<span class=\"token punctuation\">:</span>latest   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">12</span> days ago                    test</pre></td></tr></table></figure><h2 id=\"43-守护态运行\"><a class=\"markdownIt-Anchor\" href=\"#43-守护态运行\">#</a> 4.3 守护态运行</h2>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。下面举两个例子来说明一下。</p>\n<p>如果不使用 -d 参数运行容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>容器会把输出的结果 (STDOUT) 打印到宿主机上面。如果使用了 -d 参数运行容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>d ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f2ee1fb9dbd3936b7cdc2e7dac5a53e86e5e8122acb0dcef43ba4fc47ea6ccb6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker logs f2ee1fb9dbd3936b7cdc2e7dac5a53e86e5e8122acb0dcef43ba4fc47ea6ccb6</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面 (输出结果可以用 docker logs 查看)。</p>\n<h2 id=\"44-进入容器\"><a class=\"markdownIt-Anchor\" href=\"#44-进入容器\">#</a> 4.4 进入容器</h2>\n<p>在使用 <code>-d</code>  参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code>  命令或 <code>docker exec</code>  命令，推荐使用 <code>docker exec</code>  命令。</p>\n<p>（1） <code>attach</code>  命令</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>dit ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>9004e2682944ba4750772867e417a04348f1ff8b4bd8f83e629ef2052bf66844</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">9004e2682944</span>   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">49</span> seconds ago   Up <span class=\"token number\">48</span> seconds             suspicious_shockley</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker attach <span class=\"token number\">9004</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@<span class=\"token number\">9004e2682944</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</pre></td></tr></table></figure><p>注意： 如果从这个 stdin 中  <code>exit</code> ，会导致容器的停止。</p>\n<p>注：标准输入文件（stdin），通常对应终端的键盘；标准输出文件（stdout）和标准错误输出文件（stderr），这两个文件都对应终端的屏幕。</p>\n<p>（2） <code>exec</code>  命令</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>dit ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>7d49eb33ae2cca32be243690101b7640b312dee06f76f7fb083970410ccb0c76</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">7</span> seconds ago   Up <span class=\"token number\">7</span> seconds             modest_saha</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker <span class=\"token keyword\">exec</span> <span class=\"token operator\">-</span>it 7d49 bash</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@7d49eb33ae2c<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">3</span> minutes ago   Up <span class=\"token number\">3</span> minutes             modest_saha</pre></td></tr></table></figure><p>如果从这个 stdin 中 <code>exit</code> ，不会导致容器的停止。这就是为什么推荐使用 <code>docker exec</code>  的原因。</p>\n<h2 id=\"45-停止容器\"><a class=\"markdownIt-Anchor\" href=\"#45-停止容器\">#</a> 4.5 停止容器</h2>\n<p>可以使用 <code>docker container stop</code>  来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED             STATUS                         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f2ee1fb9dbd3   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">3</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> minutes ago                 focused_ride</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>9de4edc03c66   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">4</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                 loving_poincare</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c28d053628f4   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">8</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                 nifty_diffie</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>482b8943345d   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">9</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">9</span> minutes ago                 agitated_galois</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e56c41136583   hello<span class=\"token operator\">-</span>world              <span class=\"token string\">\"/hello\"</span>                  About an hour ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About an hour ago             vibrant_carver</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>066f72347a3b   pytorch<span class=\"token operator\">/</span>pytorch          <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">3</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> days ago                    dazzling_poitras</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1d4426c8152   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                 confident_edison</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>51dd9da96e61   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                   nervous_williamson</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>9c03918a1e27   pytorch<span class=\"token operator\">/</span>pytorch<span class=\"token punctuation\">:</span>latest   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">12</span> days ago                   test</pre></td></tr></table></figure><p>处于终止状态的容器，可以通过 <code>docker container start</code>  命令来重新启动。</p>\n<p>此外， <code>docker container restart</code>  命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h2 id=\"46-导出和导入\"><a class=\"markdownIt-Anchor\" href=\"#46-导出和导入\">#</a> 4.6 导出和导入</h2>\n<p>（1）导出容器</p>\n<p>如果要导出本地某个容器，可以使用 <code>docker export</code>  命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">3</span> minutes ago   Up <span class=\"token number\">3</span> minutes             modest_saha</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker export 7d49 <span class=\"token operator\">></span> <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>ember<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">.</span>tar</pre></td></tr></table></figure><p>这样将导出容器快照到本地文件。</p>\n<p>（2）导入容器快照</p>\n<p>可以使用 <code>docker import</code>  从容器快照文件中再导入为镜像，例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ cat <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>ember<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">.</span>tar <span class=\"token operator\">|</span> docker <span class=\"token keyword\">import</span> <span class=\"token operator\">-</span> test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">:</span>v1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sha256<span class=\"token punctuation\">:</span>819f39358ac6614e347c95e5ab2f948fae449b11e12c045a429a4ff0ad3c2c89</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker images</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>test<span class=\"token operator\">/</span>ubuntu       v1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>      819f39358ac6   <span class=\"token number\">23</span> seconds ago   <span class=\"token number\">78</span><span class=\"token punctuation\">.</span>1MB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ubuntu            latest    59ab366372d5   <span class=\"token number\">9</span> days ago       <span class=\"token number\">78</span><span class=\"token punctuation\">.</span>1MB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago     <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago    <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago    <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr></table></figure><h2 id=\"47-删除容器\"><a class=\"markdownIt-Anchor\" href=\"#47-删除容器\">#</a> 4.7 删除容器</h2>\n<p>可以使用 <code>docker container rm</code>  来删除一个处于终止状态的容器。例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED          STATUS                        PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7d49eb33ae2c   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> minutes ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> seconds ago             modest_saha</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container rm 7d49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7d49</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED          STATUS                      PORTS     NAMES</pre></td></tr></table></figure><h1 id=\"五-访问仓库\"><a class=\"markdownIt-Anchor\" href=\"#五-访问仓库\">#</a> 五、访问仓库</h1>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search <span class=\"token comment\"># 查找官方仓库中的镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull <span class=\"token comment\"># 拉取官方镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker push <span class=\"token comment\"># 将镜像推送到仓库</span></pre></td></tr></table></figure><p>私有仓库：todo</p>\n",
            "tags": [
                "电脑硬件知识"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/20/Computer/rekoray/",
            "url": "http://qianqiu-cell.github.io/2024/10/20/Computer/rekoray/",
            "title": "linux翻墙操作",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FZjhqdUVuRkFGSQ==\">https://www.youtube.com/watch?v=Ef8juEnFAFI</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hVmNGUVU4Rk85OA==\">https://www.youtube.com/watch?v=aVcFQU8FO98</span></p>\n<h1 id=\"下载gdebi可选\"><a class=\"markdownIt-Anchor\" href=\"#下载gdebi可选\">#</a> 下载 gdebi（可选）</h1>\n<p>（1）传统软件套间管理工具 dpkg</p>\n<p>dpkg 是 Debian package 的简写，为”Debian“ 操作系统 专门开发的套件管理系统，用于软件的安装，更新和移除。</p>\n<p>所有源自 &quot;Debian&quot; 的 Linux 的发行版都使用 dpkg, 例如 &quot;Ubuntu&quot;</p>\n<p>首先，要安装 dpkg 软件管理工具。</p>\n<pre><code>sudo apt-get install dpkg  // 原始默认不安装，需要用户手动安装\n</code></pre>\n<p>接着，使用 dpkg 命令安装 deb 安装包。</p>\n<pre><code>sudo dpkg -i name.deb  // 安装name.deb的安装包\n</code></pre>\n<p>（2）现在软件包安装工具 gdebi</p>\n<p>gdebi 是一个用于安装你自己手动下载的包的 GUI 程序。GDebi 也可以命令行模式运行（sudo gdebi name.deb），其功能和 GUI 模式下完全一样。</p>\n<p>首先，要安装 gdebi，可以使用以下命令（或者在 ubuntu software 中搜索 gdebi）：</p>\n<pre><code>sudo apt-get install gdebi\n</code></pre>\n<p>接着 gdebi 安装.deb 安装包</p>\n<pre><code>sudo gdebi name.deb\n</code></pre>\n<h1 id=\"下载rekoray-linux版本客户端\"><a class=\"markdownIt-Anchor\" href=\"#下载rekoray-linux版本客户端\">#</a> 下载 rekoray-linux 版本客户端</h1>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hdHN1cmlEYXlvL25la29yYXkvdHJlZS80LjAtYmV0YTM=\"> github 页面</span>，选择 x64 版本的 AppImage 文件。</p>\n<p>通过 <code>chomd +x</code>  命令，为 AppImage 文件设置执行权限。</p>\n<p>可以使用以下两种方法进行 rekoray 软件的启动：</p>\n<ul>\n<li>直接点击 AppImage 文件，即可启动软件。</li>\n<li>在命令行使用如下命令： <code>./nekoray-4.0-beta3-2024-07-13-linux-x64.AppImage</code> 。</li>\n</ul>\n<h1 id=\"设置订阅信息\"><a class=\"markdownIt-Anchor\" href=\"#设置订阅信息\">#</a> 设置订阅信息</h1>\n<ul>\n<li>在 rokoray 中，依次点击首选项 - 分组，打开分组界面</li>\n<li>点击新建分组，名称自定义，类型选择订阅，之后输入订阅 URL</li>\n</ul>\n<p><img data-src=\"/images/Computer/nekoray/1.png\" alt=\"\"></p>\n<h1 id=\"获取url\"><a class=\"markdownIt-Anchor\" href=\"#获取url\">#</a> 获取 URL</h1>\n<p>目前使用的是 ikuuu 的订阅连接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pa3V1dS5wdy91c2Vy\">https://ikuuu.pw/user</span>，获得 URL 的位置如下：</p>\n<p><img data-src=\"/images/Computer/nekoray/2.png\" alt=\"\"></p>\n<p>其他一些可以参考的机场：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZmFmMi5zdGMtc3BhcmUxLmNvbS91c2Vy\">https://afaf2.stc-spare1.com/user</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tbWVzMzU4YWNnbTk5bC5jb20vIy9yZWdpc3Rlcj9jb2RlPWZkQlJlYnlz\">https:// 极速机场.com/#/register?code=fdBRebys</span></p>\n<p>每一次重新启动后都需要重新获取订阅。</p>\n",
            "tags": [
                "电脑硬件知识"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/03/Computer/Linux_install/",
            "url": "http://qianqiu-cell.github.io/2024/10/03/Computer/Linux_install/",
            "title": "在移动硬盘安装Ubuntu系统",
            "date_published": "2024-10-02T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUVTNHkxUzdSRC8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljayZhbXA7dmRfc291cmNlPWUwMTE3MmVhMjkyYzFjNjA1YjM0NjEwMWQ3MDA2YzYx\">https://www.bilibili.com/video/BV1ES4y1S7RD/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=e01172ea292c1c605b346101d7006c61</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhMNDExcjdwMi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1lMDExNzJlYTI5MmMxYzYwNWIzNDYxMDFkNzAwNmM2MQ==\">https://www.bilibili.com/video/BV1hL411r7p2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e01172ea292c1c605b346101d7006c61</span></p>\n<ul>\n<li>目前安装的 <code>Ubuntu</code>  版本为 <code>Ubuntu 20.04.6 LTS (Focal Fossa)</code> ，镜像地址为: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWxlYXNlcy51YnVudHUuY29tL2ZvY2FsLw==\">https://releases.ubuntu.com/focal/</span></li>\n<li>使用 <code>rufus</code>  创建 <code>USB</code>  启动盘，官方网站为: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWZ1cy5pZS96aC8=\">https://rufus.ie/zh/</span>。</li>\n<li>使用 <code>DiskGenius</code>  进行分区管理，下载地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNrZ2VuaXVzLmNuL2Rvd25sb2FkLnBocA==\">https://diskgenius.cn/download.php</span></li>\n</ul>\n<h1 id=\"step-1-制作u盘启动盘\"><a class=\"markdownIt-Anchor\" href=\"#step-1-制作u盘启动盘\">#</a> step 1: 制作 U 盘启动盘</h1>\n<p>  打开 <code>Rufus</code> ，<strong>设备选择要制作启动盘的 U 盘</strong>，通过 “选择” 按键<strong>选择所下载的 Ubuntu 镜像文件</strong>，<strong>分区类型为 GPT</strong>，<strong>目标系统类型为 UEFI (非 CSM)</strong>，<strong>文件系统类型选择 FAT32 (默认)</strong>，<strong>簇大小选择 16K 字节 (默认)</strong>。点击<strong>开始</strong>，等待制作完成，之后便可关闭 <code>Rufus</code> 。 <code>Rufus</code>  的配置界面如下图所示：</p>\n<p><img data-src=\"/images/Computer/Linux_install/1.1.png\" alt=\"\"></p>\n<h1 id=\"step-2-设置分区\"><a class=\"markdownIt-Anchor\" href=\"#step-2-设置分区\">#</a> step 2: 设置分区</h1>\n<p>  首先设置 <code>EFI</code>  分区，文件系统类型选择 <code>EFI system partition</code> ，大小选择 <code>&gt;=1GB (2GB)</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.1.png\" alt=\"\"></p>\n<p>  之后设置 <code>swap</code>  分区，文件系统类型选择 <code>Linux swap partition</code> ，大小选择 <code>&gt;=16GB (32GB)</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.2.png\" alt=\"\"></p>\n<p>  之后设置 <code>/</code>  分区，文件系统类型选择 <code>Ext4 (Linux Data)</code> ，大小选择 <code>&gt;=40GB (200GB)</code> ，卷标选择 <code>/</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.3.png\" alt=\"\"></p>\n<p>  最后设置 <code>home</code>  分区，文件系统类型选择 <code>Ext4 (Linux Data)</code> ，大小选择 <code>&gt;=425GB (600GB)</code> ，卷标选择 <code>/home</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.4.png\" alt=\"\"></p>\n<p>  如果移动硬盘还有剩余空间，则可以作为常规 <code>Windows</code>  移动硬盘使用，文件系统类型选择 <code>NTFS (MS Basic Data)</code> ，大小选择剩余的大小，配置的界面如下：</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.5.png\" alt=\"\"></p>\n<p>  所有设置完成的界面如下所示</p>\n<p><img data-src=\"/images/Computer/Linux_install/2.6.png\" alt=\"\"></p>\n<p>  完成设置后即可点击 <code>DiskGenius</code>  界面左上角的 “保存更改” 按键，开始创建分区。</p>\n<h1 id=\"step-3-安装ubuntu系统\"><a class=\"markdownIt-Anchor\" href=\"#step-3-安装ubuntu系统\">#</a> step 3: 安装 Ubuntu 系统</h1>\n<p>  在 <code>Windows</code>  的恢复菜单中选择重新启动系统，则系统重新启动时会自动进入引导菜单，此时选择<strong> U 盘启动</strong>，进入 U 盘系统。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.1.png\" alt=\"\"></p>\n<p><img data-src=\"/images/Computer/Linux_install/3.1.5.png\" alt=\"\"></p>\n<p>  选择第一个 Ubuntu 选项，进入 Ubuntu 的安装界面。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.2.png\" alt=\"\"></p>\n<p>  首先在左边选择中文简体，右边选择安装 Ubuntu。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.3.png\" alt=\"\"></p>\n<p>  键盘布局选择默认，点击继续。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.4.png\" alt=\"\"></p>\n<p>  现在一共有 2 种安装模式可供选择：</p>\n<ul>\n<li>正常安装（我们需要选择的）：您可以安装功能强大的桌面所需的所有应用程序，包括：Web 浏览器、办公套件、游戏和媒体播放器等。</li>\n<li>最小安装：可以安装最小的桌面版本，该版本仅具有 Web 浏览器和一些基本实用程序。</li>\n</ul>\n<p>  还可以在安装 <code>Ubuntu 20.04 LTS</code>  桌面版的同时勾选「安装 Ubuntu 时下载更新」选项以下载并应用更新（推荐选上），也可以选择是否同时（不推荐）「为图形或无线硬件，以及其它媒体格式安装第三方软件」。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.5.png\" alt=\"\"></p>\n<p>  在安装类型界面，一定一定要选择<strong>其他选项</strong>。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.6.png\" alt=\"\"></p>\n<p>  在手动安装界面，依次配置在 <code>stpe 2</code>  中设置的四个分区</p>\n<ul>\n<li>首先是<strong> EFI 区</strong>，大小默认，用于选择<strong> EFI 系统分区</strong>；</li>\n<li>下面是<strong>交换分区</strong>，大小默认，用于选择<strong>交换空间</strong>；</li>\n<li>然后是<strong>根目录分区</strong>，大小默认，用于选择<strong> Ext4 日志文件系统</strong>，挂载点选择 <code>/</code> ；</li>\n<li>最后是<strong> home 分区</strong>，大小默认，用于选择<strong> Ext4 日志文件系统</strong>，挂载点选择 <code>/home</code> 。</li>\n</ul>\n<p>  之后，在安装启动引导器的设备选项栏中务必选择 Ubuntu 系统的 EFI 分区，如 /dev/sda1。</p>\n<p>  完成上述设置后，点击 “现在安装”，之后连续点击两次继续，等待安装完成。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.7.jpg\" alt=\"\"><br>\n<img data-src=\"/images/Computer/Linux_install/3.8.jpg\" alt=\"\"><br>\n<img data-src=\"/images/Computer/Linux_install/3.9.jpg\" alt=\"\"><br>\n<img data-src=\"/images/Computer/Linux_install/3.10.jpg\" alt=\"\"><br>\n<img data-src=\"/images/Computer/Linux_install/3.11.jpg\" alt=\"\"></p>\n<p>  时区不需要更改，点击继续。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.12.png\" alt=\"\"></p>\n<p>  设置账户信息，密码建议设置简单一点，并选择自动登录选项，点击继续。</p>\n<p><img data-src=\"/images/Computer/Linux_install/3.13.png\" alt=\"\"></p>\n<p>  之后即可完成 Ubuntu 系统的安装。</p>\n<h1 id=\"其他问题\"><a class=\"markdownIt-Anchor\" href=\"#其他问题\">#</a> 其他问题</h1>\n<h2 id=\"1-启动项的问题\"><a class=\"markdownIt-Anchor\" href=\"#1-启动项的问题\">#</a> 1、启动项的问题</h2>\n<p>第一次安装高版本 24.04Ubuntu 系统时，可以实现</p>\n<ul>\n<li>不插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘时选择进入 Ubuntu 系统或是 Windows 系统。</li>\n</ul>\n<p>但是在第二次安装 20.04 版本的 Ubuntu 后，无法实现上述启动选项，只能配合<strong> EasyUEFI 软件的管理 EFI 启动项页面</strong>（文件已保存至百度网盘），实现如下的启动功能：</p>\n<p><img data-src=\"/images/Computer/Linux_install/4.1.png\" alt=\"\"></p>\n<p>（1）当 Windows Boot Manager 为启动序列首个选项时（目前采用的）</p>\n<ul>\n<li>不插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘，在 Windows 系统的 “恢复” 选项卡中启动电脑，可以进入选择进入 Ubuntu 系统或是 Windows 系统的页面。</li>\n</ul>\n<p>（2）当 Ubuntu 为启动序列首个选项时</p>\n<ul>\n<li>不插入移动硬盘是会进入 GNU GRUB 命令行界面，输入 exit 后可进入 Windows 系统；</li>\n<li>插入移动硬盘后会进入选择 Ubuntu 系统或是 Windows 系统的界面。</li>\n</ul>\n<p><img data-src=\"/images/Computer/Linux_install/4.2.jpg\" alt=\"\"></p>\n",
            "tags": [
                "电脑硬件知识"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2023/09/06/Computer/monitor/",
            "url": "http://qianqiu-cell.github.io/2023/09/06/Computer/monitor/",
            "title": "显示器的一些小tricks",
            "date_published": "2023-09-05T16:00:00.000Z",
            "content_html": "<h1 id=\"一-显示器的色域和色准\"><a class=\"markdownIt-Anchor\" href=\"#一-显示器的色域和色准\">#</a> 一、显示器的色域和色准</h1>\n<p>（内容参考 硬件茶谈 抖音显示器系列视频）</p>\n<h2 id=\"11-色域的概念\"><a class=\"markdownIt-Anchor\" href=\"#11-色域的概念\">#</a> 1.1 色域的概念</h2>\n<p>  将所有人眼可见的所有光的颜色信息和明度信息通过一定的数学变换映射到一个平面上，就得到了一个色域马蹄图，代表了人眼睛可以识别的全部颜色，这个颜色范围空间被称为 CIE 色彩空间。<br>\n<img data-src=\"/images/Computer/monitor/1.1.jpg\" alt=\"\"><br>\n  现在的显示器显示颜色是依赖于红绿蓝三个子像素去混合产生颜色，一台显示器显示颜色的极限就是红绿蓝各自亮度最大，而由这三个点连线所构成的区域就是色域。色域指的是显示器能覆盖颜色丰富度的概念，色域覆盖越广的显示器，能显示的颜色就越丰富，色域越窄的显示器能显示的颜色就越匮乏<br>\n<img data-src=\"/images/Computer/monitor/1.2.jpg\" alt=\"\"><br>\n  在 CIE 颜色覆盖范围内圈出来一定的区域作为标尺，这就是色彩空间的概念，常见的色彩空间如下图所示。<br>\n<img data-src=\"/images/Computer/monitor/1.3.jpg\" alt=\"\"><br>\n  99% sRGB 代表屏幕可以显示出 sRGB 空间中 99% 的色彩信息，95% DCI-P3 就意味着他能显示出 DCI-P3 空间当中 95% 的色彩。但是并不是色域越广的显示器体验就越好，购买 100% sRGB 的显示器可以更好的应用于绝大多数情况。Windows 操作系统也是以 100% sRGB 色彩空间作为标尺去存储色彩信息的，常见的视频、图片等也以 sRGB 的色彩空间进行存储和显示。<br>\n<img data-src=\"/images/Computer/monitor/1.4.png\" alt=\"\"><br>\n<img data-src=\"/images/Computer/monitor/1.5.png\" alt=\"\"><br>\n  Windows 操作系统判断显示器支持多少分辨率、多少刷新率以及型号是通过读取 EDID 信息来获取的，但是 EDID 信息里并没有存储显示器的色域覆盖的相关信息，也就是说操作系统并不知道显示器是多少色域的面板，Windows 系统默认显示器是 100% sRGB 的，故当显示器的色域不是 100% sRGB 时，显示在显示器上的色彩就是过饱和或欠饱和的。</p>\n<h2 id=\"12-色准的概念\"><a class=\"markdownIt-Anchor\" href=\"#12-色准的概念\">#</a> 1.2 色准的概念</h2>\n<p>  色准指的就是显示器在色域覆盖范围内显示颜色的准确度，衡量色准的参数叫做△E，△E 值越小，代表色彩偏离越小，△E 值的参考一般是参考平均△E 值和最大△E 值，色准差的显示器在显示画面的时候，色彩就会不正确，出现偏色的现象。对于色彩较差的显示器可以使用色彩校色仪进行矫正，但在选择显示器时最好直接购买所需色准的显示器。显示器的色准选择可以参考下图。除非从事专业的修图或者视频调色，一般来讲不需要太关注色准的表现，在其他参数面前优先级并不高，更需要去照顾分辨率，刷新率，响应时间和面板类型。<br>\n<img data-src=\"/images/Computer/monitor/1.6.jpg\" alt=\"\"></p>\n<h1 id=\"二-显示器的色深\"><a class=\"markdownIt-Anchor\" href=\"#二-显示器的色深\">#</a> 二、显示器的色深</h1>\n<h2 id=\"21-色深的概念\"><a class=\"markdownIt-Anchor\" href=\"#21-色深的概念\">#</a> 2.1 色深的概念</h2>\n<p>  屏幕是由像素点构成的，像素点调整颜色是依赖于红绿蓝三个子像素的亮度来完成的。而子像素的亮度存在阶梯，阶梯越多，能显示的颜色信息越准确，下图分别显示了 2 个阶梯和 16 个阶梯情况下在黑白图像中的显示情况。<br>\n<img data-src=\"/images/Computer/monitor/2.1.jpg\" alt=\"\"><br>\n  颜色过度的阶梯分的越多，屏幕在显示色彩过渡的时候就能呈现的越平滑，色彩越不容易出现断层的现象，色深比较差的显示器在显示画面是比较容易出现和梯田一样的色彩断层。<br>\n<img data-src=\"/images/Computer/monitor/2.2.jpg\" alt=\"\"><br>\n色深只是衡量色彩平滑度的一个概念，对显示器的色域是没有影响的。显示器宣传显示颜色为 1670 万色和 10.7 亿色分别对应 256 阶梯和 1024 阶梯的显示器，计算过程如下。<br>\n<img data-src=\"/images/Computer/monitor/2.3.jpg\" alt=\"\"></p>\n<h2 id=\"22-frc像素连抖动技术\"><a class=\"markdownIt-Anchor\" href=\"#22-frc像素连抖动技术\">#</a> 2.2 FRC 像素连抖动技术</h2>\n<p>  FRC 像素连抖动技术简单来说就是利用人眼视觉暂留效应，利用可显示颜色通过快速抖动，来形成两像素颜色之间无法显示的颜色。<br>\n<img data-src=\"/images/Computer/monitor/2.4.jpg\" alt=\"\"><br>\n  但是这种抖动会产生很多的静态噪点，并不能坐到和原生色深相匹配，只能在一定程度上缓解色彩断层现象。<br>\n<img data-src=\"/images/Computer/monitor/2.5.jpg\" alt=\"\"><br>\n  商家在宣传屏幕时，可以将 6Bit 抖 8Bit 的屏幕宣传成 8Bit，8Bit 抖 10Bit 的屏幕宣传成 10Bit。可以去<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlzcGxheXNwZWNpZmljYXRpb25zLmNvbS8=\"> DisplaySpecifications</span> 网站查询显示器是原生色深还是靠着 FRC 抖动上去的色深。<br>\n<img data-src=\"/images/Computer/monitor/2.6.jpg\" alt=\"\"><br>\n  在选择色深参数时，可以参考下图。<br>\n<img data-src=\"/images/Computer/monitor/2.7.jpg\" alt=\"\"><br>\n  购买了高色深显示器后，需要去显卡驱动里把显卡输出色深改成屏幕的对应值。<br>\n<img data-src=\"/images/Computer/monitor/2.8.jpg\" alt=\"\"></p>\n<h1 id=\"三-显示器的假刷新率\"><a class=\"markdownIt-Anchor\" href=\"#三-显示器的假刷新率\">#</a> 三、显示器的假刷新率</h1>\n<p>  显卡一秒钟输出给显示器多少张画面就是帧数，显示器一秒可以显示多少张画面就是面板的刷新率。显卡通过读取 EDID 中的信息来获取显示器的刷新率等信息，假刷新率显示器就是更改了 EDID 的信息，将 60Hz 的屏幕修改为 144Hz。<br>\n<img data-src=\"/images/Computer/monitor/3.1.png\" alt=\"\"><br>\n  为了测试屏幕的刷新率是否正常，可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVzdHVmby5jb20v\"> testufo</span> 网站中的 <code>Frame Skipping - For Display Overclocking</code>  模块，利用相机设置 0.1s 快门（或者肉眼观看），看显示块儿是否完整。</p>\n",
            "tags": [
                "电脑硬件知识",
                "显示器"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2023/01/03/Computer/Realtek/",
            "url": "http://qianqiu-cell.github.io/2023/01/03/Computer/Realtek/",
            "title": "关于戴尔G3重装系统后的音频问题",
            "date_published": "2023-01-02T16:00:00.000Z",
            "content_html": "<p><span class=\"label warning\">💥问题描述💥</span>每一次使用戴尔 G3 恢复系统之后就会在音频位置出现<em>未插入扬声器或耳机</em>的问题<br>\n<img data-src=\"/images/Computer/Realtek/1.1.jpg\" alt=\"\"><br>\n  该问题的产生原因是系统没有 <code>Realtek</code>  音频驱动程序，正确的解决方法为进入<mark>戴尔官网</mark>，进行相应驱动程序的下载，安装步骤如下（❌❌❌千万不要下载驱动安装精灵❌❌❌）</p>\n<h1 id=\"一-进入戴尔官网进行声卡驱动下载\"><a class=\"markdownIt-Anchor\" href=\"#一-进入戴尔官网进行声卡驱动下载\">#</a> 一、进入戴尔官网进行声卡驱动下载</h1>\n<p>（1）直接在浏览器中搜索<mark>戴尔官网驱动下载</mark>，即可进入戴尔官网的驱动安装界面<br>\n<img data-src=\"/images/Computer/Realtek/1.2.png\" alt=\"\"><br>\n（2）进入戴尔官网后输入戴尔服务标签即可进入驱动下载界面<br>\n<img data-src=\"/images/Computer/Realtek/1.3.jpg\" alt=\"\"><br>\n  戴尔服务标签一般位于<mark>电脑下方</mark>（本机服务标签已保存至博客 word 版文件夹中）<br>\n<img data-src=\"/images/Computer/Realtek/1.4.jpg\" alt=\"\"><br>\n（3）进入如下驱动安装界面后下载<mark> Realtek 高保真声卡驱动程序</mark><br>\n<img data-src=\"/images/Computer/Realtek/1.5.jpg\" alt=\"\"></p>\n<h1 id=\"二-realtek声卡驱动安装\"><a class=\"markdownIt-Anchor\" href=\"#二-realtek声卡驱动安装\">#</a> 二、Realtek 声卡驱动安装</h1>\n<p>  下载完成声卡驱动安装程序后打开安装程序，一路下一步之后完成 <code>Realtek</code>  声卡驱动程序的安装，如下图所示<br>\n<img data-src=\"/images/Computer/Realtek/2.1.jpg\" alt=\"\"><br>\n  重新启动计算机后可以发现音频功能已经恢复正常<br>\n<img data-src=\"/images/Computer/Realtek/2.2.jpg\" alt=\"\"></p>\n",
            "tags": [
                "电脑硬件知识"
            ]
        }
    ]
}