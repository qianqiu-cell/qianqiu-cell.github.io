{
    "version": "https://jsonfeed.org/version/1",
    "title": "Keep Moving • All posts by \"linux\" category",
    "description": "🌸学习笔记🌸",
    "home_page_url": "http://qianqiu-cell.github.io",
    "items": [
        {
            "id": "http://qianqiu-cell.github.io/2024/12/29/linux/shell/",
            "url": "http://qianqiu-cell.github.io/2024/12/29/linux/shell/",
            "title": "Shell脚本",
            "date_published": "2024-12-28T16:00:00.000Z",
            "content_html": "<h1 id=\"一-基础概念\"><a class=\"markdownIt-Anchor\" href=\"#一-基础概念\">#</a> 一、基础概念</h1>\n<p>  Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Linux 的 Shell 种类众多，常见的有：</p>\n<ul>\n<li>Bourne Shell（/usr/bin/sh 或 /bin/sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（/usr/bin/csh）</li>\n<li>K Shell（/usr/bin/ksh）</li>\n<li>Shell for Root（/sbin/sh）</li>\n<li>……</li>\n</ul>\n<p>  其中，Bash，也就是 Bourne Again Shell，由于易用和免费，在日常工作中被广泛使用。同时，Bash 也是大多数 Linux 系统默认的 Shell。</p>\n<p>  sh 脚本的第一行通常是</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr></table></figure><p>   <code>#!</code>  是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p>\n<p>  运行 Shell 脚本有两种方法：</p>\n<ul>\n<li>作为可执行程序</li>\n</ul>\n<pre><code>chmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n</code></pre>\n<p>  注意，一定要写成 ./test.sh，而不是 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3Quc2g=\">test.sh</span>，运行其它二进制的程序也一样，直接写 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3Quc2g=\">test.sh</span>，linux 系统会去 PATH 里寻找有没有叫 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3Quc2g=\">test.sh</span> 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 <span class=\"exturl\" data-url=\"aHR0cDovL3Rlc3Quc2g=\">test.sh</span> 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<ul>\n<li>作为解释器参数</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/bin/sh test.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/bin/php test.php</pre></td></tr></table></figure><p>  这种方式运行的脚本，不需要在第一行指定解释器信息，写了也会被忽略。</p>\n<h1 id=\"二-shell-变量\"><a class=\"markdownIt-Anchor\" href=\"#二-shell-变量\">#</a> 二、Shell 变量</h1>\n<h2 id=\"21-创建shell变量\"><a class=\"markdownIt-Anchor\" href=\"#21-创建shell变量\">#</a> 2.1 创建 Shell 变量</h2>\n<p>  在 Shell 编程中，变量是用于存储数据值的名称。定义变量时，变量名不加美元符号，如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span></pre></td></tr></table></figure><p>  注意，与其他编程语言不同，<strong>变量名和等号之间不能有空格</strong>，因为空格通常用于分隔命令和参数。</p>\n<p>  除了显式地直接赋值，还可以用语句给变量赋值，如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span> /etc<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> /etc<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>以上语句将 /etc 下目录的文件名循环出来。</pre></td></tr></table></figure><h2 id=\"22-使用shell变量\"><a class=\"markdownIt-Anchor\" href=\"#22-使用shell变量\">#</a> 2.2 使用 Shell 变量</h2>\n<p>  使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"qinjx\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$your_name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;your_name&#125;</span></pre></td></tr></table></figure><p>  变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">skill</span> <span class=\"token keyword\">in</span> Ada Coffe Action Java<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I am good at <span class=\"token variable\">$&#123;skill&#125;</span>Script\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>  如果不给 <code>skill</code>  变量加花括号，写成 <code>echo &quot;I am good at $skillScript&quot;</code> ，解释器就会把 <code>$skillScript</code>  当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。推荐给所有变量加上花括号，这是个好的编程习惯。</p>\n<p>  已定义的变量，可以被重新定义，如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"tom\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$your_name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"alibaba\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$your_name</span></pre></td></tr></table></figure><h2 id=\"23-只读变量\"><a class=\"markdownIt-Anchor\" href=\"#23-只读变量\">#</a> 2.3 只读变量</h2>\n<p>  使用  <code>readonly</code>  命令可以将变量定义为只读变量，只读变量的值不能被改变。下面的例子尝试更改只读变量，结果报错：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">myUrl</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.google.com\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> myUrl</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">myUrl</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.runoob.com\"</span></pre></td></tr></table></figure><p>运行脚本，结果如下：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>line <span class=\"token number\">4</span>: myUrl: <span class=\"token builtin class-name\">readonly</span> variable</pre></td></tr></table></figure><h2 id=\"24-删除变量\"><a class=\"markdownIt-Anchor\" href=\"#24-删除变量\">#</a> 2.4 删除变量</h2>\n<p>  使用  <code>unset</code>  命令可以删除变量。变量被删除后不能再次使用。unset 命令不能删除只读变量。语法：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> variable_name</pre></td></tr></table></figure><h2 id=\"25-变量类型\"><a class=\"markdownIt-Anchor\" href=\"#25-变量类型\">#</a> 2.5 变量类型</h2>\n<p>  Shell 支持不同类型的变量，其中一些主要的类型包括：</p>\n<ul>\n<li>字符串变量： 在 Shell 中，变量通常被视为字符串。你可以使用单引号 ’ 或双引号 &quot; 来定义字符串，例如：</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">my_string</span><span class=\"token operator\">=</span><span class=\"token string\">'Hello, World!'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">my_string</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello, World!\"</span></pre></td></tr></table></figure><ul>\n<li>整数变量： 在一些 Shell 中，可以使用  <code>declare</code>  或  <code>typeset</code>  命令来声明整数变量。这样的变量只包含整数值，例如：</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-i</span> <span class=\"token assign-left variable\">my_integer</span><span class=\"token operator\">=</span><span class=\"token number\">42</span></pre></td></tr></table></figure><ul>\n<li>数组变量： Shell 也支持数组，允许在一个变量中存储多个值。数组可以是整数索引数组或关联数组，以下是一个简单的整数索引数组的例子：</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 整数索引数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">my_array</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 关联数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> associative_array</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>associative_array<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"John\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>associative_array<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr></table></figure><ul>\n<li>环境变量： 这些是由操作系统或用户设置的特殊变量，用于配置 Shell 的行为和影响其执行环境。例如，PATH 变量包含了操作系统搜索可执行文件的路径：</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><ul>\n<li>特殊变量： 有一些特殊变量在 Shell 中具有特殊含义，例如  <code>$0</code>  表示脚本的名称， <code>$1</code> ,  <code>$2</code> , 等表示脚本的参数， <code>$#</code> 表示传递给脚本的参数数量， <code>$?</code>  表示上一个命令的退出状态等。</li>\n</ul>\n<h3 id=\"251-shell-字符串\"><a class=\"markdownIt-Anchor\" href=\"#251-shell-字符串\">#</a> 2.5.1 Shell 字符串</h3>\n<p>  字符串是 shell 编程中最常用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 单引号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">'runoob'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'Hello, I know you are \\\"$your_name\\\"! \\n'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token variable\">$str</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 输出：Hello, I know you are \\\"$your_name\\\"!</span></pre></td></tr></table></figure><p>  单引号字符串的限制：</p>\n<ul>\n<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>\n<li>单引号字符串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 双引号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello, I know you are <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$your_name</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>! <span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token variable\">$str</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 输出结果为：Hello, I know you are \"runoob\"!</span></pre></td></tr></table></figure><p>  双引号的优点：</p>\n<ul>\n<li>双引号里可以有变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拼接字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">your_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用双引号拼接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">greeting</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, \"</span><span class=\"token variable\">$your_name</span><span class=\"token string\">\" !\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">greeting_1</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello, <span class=\"token variable\">$&#123;your_name&#125;</span> !\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$greeting</span>  <span class=\"token variable\">$greeting_1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 输出结果为：hello, runoob ! hello, runoob !</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用单引号拼接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">greeting_2</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, '</span><span class=\"token variable\">$your_name</span><span class=\"token string\">' !'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">greeting_3</span><span class=\"token operator\">=</span><span class=\"token string\">'hello, $&#123;your_name&#125; !'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$greeting_2</span>  <span class=\"token variable\">$greeting_3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 输出结果为：hello, runoob ! hello, $&#123;your_name&#125; !</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取字符串长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">string</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcd\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> $</pre></td></tr></table></figure>",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/23/linux/git/",
            "url": "http://qianqiu-cell.github.io/2024/10/23/linux/git/",
            "title": "git",
            "date_published": "2024-10-22T16:00:00.000Z",
            "content_html": "<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhNNDExMzc3ai8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljayZhbXA7dmRfc291cmNlPWUwMTE3MmVhMjkyYzFjNjA1YjM0NjEwMWQ3MDA2YzYx\">https://www.bilibili.com/video/BV1HM411377j/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=e01172ea292c1c605b346101d7006c61</span></p>\n<h1 id=\"一-git-本地操作\"><a class=\"markdownIt-Anchor\" href=\"#一-git-本地操作\">#</a> 一、git 本地操作</h1>\n<h2 id=\"11-git-安装\"><a class=\"markdownIt-Anchor\" href=\"#11-git-安装\">#</a> 1.1 git 安装</h2>\n<p>如果 git 已经安装好，那么输入 git -v 命令，可以查看版本号。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Ember<span class=\"token operator\">></span>git <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> version <span class=\"token number\">2.42</span>.0.windows.2</pre></td></tr></table></figure><p>git 安装完成之后可以首先配置用户名和邮箱。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"qianqiu-cell\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"2832567851@qq.com\"</span></pre></td></tr></table></figure><p>其中 --global 命令可以替换为：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--Local: （默认）本地配置，只对本地仓库有效</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--global: 全局配置，对当前用户所有仓库有效</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--system: 系统配置，对当前系统所有用户有效</pre></td></tr></table></figure><p>使用如下命令保存用户名和邮箱，避免每一次的输入。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> credential.helper store</pre></td></tr></table></figure><p>查看配置好的用户名和邮箱</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Ember<span class=\"token operator\">></span>git config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--list</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">user.name</span><span class=\"token operator\">=</span>Ember</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">user.email</span><span class=\"token operator\">=</span><span class=\"token number\">2832567851</span>@qq.com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">safe.directory</span><span class=\"token operator\">=</span>F:/blog/.deploy_git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">http.sslverify</span><span class=\"token operator\">=</span>false</pre></td></tr></table></figure><h2 id=\"12-新建git仓库\"><a class=\"markdownIt-Anchor\" href=\"#12-新建git仓库\">#</a> 1.2 新建 git 仓库</h2>\n<p>方式一：将一个目录变成 git 仓库，使用 git init 命令即可。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>python<span class=\"token punctuation\">\\</span>z_test<span class=\"token punctuation\">\\</span>test<span class=\"token operator\">></span>git init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Initialized empty Git repository <span class=\"token keyword\">in</span> E:/python/z_test/test/.git/</pre></td></tr></table></figure><p>方式二：从远程服务器上克隆一个仓库，使用 git clone 命令即可。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>python<span class=\"token punctuation\">\\</span>z_test<span class=\"token punctuation\">\\</span>test<span class=\"token operator\">></span>git clone https://gitee.com/mindspore/mindformers.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Cloning into <span class=\"token string\">'mindformers'</span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>remote: Enumerating objects: <span class=\"token number\">50448</span>, done.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>remote: Counting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">188</span>/188<span class=\"token punctuation\">)</span>, done.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>remote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">107</span>/107<span class=\"token punctuation\">)</span>, done.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>remote: Total <span class=\"token number\">50448</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">121</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">125</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">81</span><span class=\"token punctuation\">)</span>, pack-reused 50260Receiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">50448</span>/50448<span class=\"token punctuation\">)</span>, <span class=\"token number\">45.44</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">4.81</span> MiB/s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Receiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">50448</span>/50448<span class=\"token punctuation\">)</span>, <span class=\"token number\">49.09</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">5.59</span> MiB/s, done.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Resolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">38161</span>/38161<span class=\"token punctuation\">)</span>, done.</pre></td></tr></table></figure><p>创建好 git 仓库后会在本地文件夹中生成一个 .git 文件夹，里面包含一些配置文件。若删除 .git 文件夹，则会破坏本地仓库。</p>\n<h2 id=\"13-工作区域和文件状态\"><a class=\"markdownIt-Anchor\" href=\"#13-工作区域和文件状态\">#</a> 1.3 工作区域和文件状态</h2>\n<p>git 的本地数据管理分为三个区域，分别是<strong>工作区，暂存区，和本地仓库</strong></p>\n<p><strong>工作区（Working Directory）</strong>：工作区是本地计算机上的项目目录，用户在这里进行文件的创建、修改和删除操作。工作区包含了当前项目的所有文件和子目录。</p>\n<ul>\n<li>显示项目的当前状态。</li>\n<li>文件的修改在工作区中进行，但这些修改还没有被记录到版本控制中。</li>\n</ul>\n<p><strong>暂存区（Staging area/Index）</strong>：用于临时存放改动，事实上它只是一个文件，保存即将提交的文件列表信息。</p>\n<ul>\n<li>暂存区保存了将被包括在下一个提交中的更改。</li>\n<li>可以多次使用 git add 命令来将文件添加到暂存区，直到准备好提交所有更改。</li>\n</ul>\n<p><strong>本地仓库（Local Repository）</strong>：git 仓库，保存了所有的提交记录，包括提交记录的提交信息、提交记录的提交者、提交记录的提交时间等。</p>\n<ul>\n<li>版本库分为本地版本库和远程版本库。这里主要指本地版本库。</li>\n<li>本地版本库存储在 .git 目录中，它包含了所有提交的对象和引用。</li>\n</ul>\n<p><img data-src=\"/images/linux/git/1.3.1.png\" alt=\"\"></p>\n<p>git 文件状态分为 <strong>untracked（未跟踪）、unmodified（未修改）、committed（已提交）、staged（已暂存）</strong></p>\n<p><strong>untracked（未跟踪）</strong>：未跟踪的文件，新创建的文件，还没有被 git 管理起来的文件，所以不会被 git 追踪。</p>\n<p><strong>unmodified（未修改）</strong>：已经被 git 管理起来了，但文件内容没有被修改。</p>\n<p><strong>modified（已修改）</strong>：文件被修改，但还没有添加到暂存区里面。</p>\n<p><strong>staged（已暂存）</strong>：文件被修改，并且已经提娜佳到了暂存区域内的文件。</p>\n<p><img data-src=\"/images/linux/git/1.3.2.jpg\" alt=\"\"></p>\n<h2 id=\"14-添加和提交文件\"><a class=\"markdownIt-Anchor\" href=\"#14-添加和提交文件\">#</a> 1.4 添加和提交文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> ls-files             <span class=\"token comment\"># 查看暂存区中的内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> status               <span class=\"token comment\"># 查看当前工作目录的文件状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>           <span class=\"token comment\"># 将指定文件添加到暂存区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>dir<span class=\"token operator\">></span>            <span class=\"token comment\"># 将指定目录下的所有文件添加到暂存区</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> *.txt            <span class=\"token comment\"># 将指定文件类型添加到暂存区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>                <span class=\"token comment\"># 将所有文件添加到暂存区，其中。表示当前目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cache</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>    <span class=\"token comment\"># 删除暂存区的指定文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"message\"</span>  <span class=\"token comment\"># 将暂存区的文件提交到本地仓库，不会提交工作区中的内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> log                  <span class=\"token comment\"># 查看提交记录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span>        <span class=\"token comment\"># 查看简洁的提交记录</span></pre></td></tr></table></figure><h2 id=\"15-git-reset-回退版本\"><a class=\"markdownIt-Anchor\" href=\"#15-git-reset-回退版本\">#</a> 1.5 git reset 回退版本</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> <span class=\"token operator\">&lt;</span>commit_hash<span class=\"token operator\">></span>     <span class=\"token comment\"># 回退到某一版本，保留工作区和暂存区的所有修改内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit_hash<span class=\"token operator\">></span>     <span class=\"token comment\"># 回退到某一版本，丢弃工作区和暂存区的所有修改内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--mixed</span> <span class=\"token operator\">&lt;</span>commit_hash<span class=\"token operator\">></span>    <span class=\"token comment\"># （默认）回退到某一版本，只保留工作区的修改内容，而丢弃暂存区的修改内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span>                 <span class=\"token comment\"># 查看简洁的提交记录，其中包含了版本号信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> reflog                        <span class=\"token comment\"># 查看 git 命令执行记录，用于误操作时查看操作前的版本号，并回退到之前的版本</span></pre></td></tr></table></figure><p><img data-src=\"/images/linux/git/1.5.1.jpg\" alt=\"\"></p>\n<h2 id=\"16-git-diff-查看差异\"><a class=\"markdownIt-Anchor\" href=\"#16-git-diff-查看差异\">#</a> 1.6 git diff 查看差异</h2>\n<p>使用 git diff 命令可以查看当前工作区、暂存区、本地仓库之间的差异，也可以查看两个版本之间的差异，以及不同分支之间的差异。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 其中 HEAD 表示指向分支的最新提交节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span>                                 <span class=\"token comment\"># （默认）比较工作区和暂存区的差异</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD                            <span class=\"token comment\"># 比较工作区和本地仓库之间的差异</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--cached</span> <span class=\"token punctuation\">(</span>or --staged<span class=\"token punctuation\">)</span>          <span class=\"token comment\"># 比较暂存区和本地仓库之间的差异</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&lt;</span>commit_hash<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>commit_hash<span class=\"token operator\">></span>     <span class=\"token comment\"># 比较两个版本的差异</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD~ HEAD                      <span class=\"token comment\"># 比较上一个版本和最新版本之间的差异</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD~2 HEAD                     <span class=\"token comment\"># 比较前两个版本和最新版本之间的差异</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> HEAD~2 HEAD <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>              <span class=\"token comment\"># 比较指定文件在前两个版本和最新版本之间的差异</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span>     <span class=\"token comment\"># 比较两个分支之间的差异</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>python<span class=\"token punctuation\">\\</span>z_test<span class=\"token punctuation\">\\</span>test_b<span class=\"token punctuation\">\\</span>test_b_b<span class=\"token operator\">></span>git <span class=\"token function\">diff</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token parameter variable\">--git</span> a/test.txt b/test.txt   <span class=\"token comment\"># 发生变更的文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>index 8b4e49c<span class=\"token punctuation\">..</span>e1c0c2f <span class=\"token number\">100644</span>      <span class=\"token comment\"># 文件的哈希值，文件的权限</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--- a/test.txt                     <span class=\"token comment\"># 删除的文件内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+++ b/test.txt                     <span class=\"token comment\"># 新增的文件内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@@ <span class=\"token parameter variable\">-1</span> +1,2 @@</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-this</span> is an content <span class=\"token keyword\">for</span> test.      <span class=\"token comment\"># 修改前的内容（开始）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">\\</span> No newline at end of <span class=\"token function\">file</span>        <span class=\"token comment\"># 修改前的内容（结束）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+this is an content <span class=\"token keyword\">for</span> test.      <span class=\"token comment\"># 修改后的内容（开始）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+edit <span class=\"token keyword\">for</span> <span class=\"token number\">1</span>.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">\\</span> No newline at end of <span class=\"token function\">file</span>        <span class=\"token comment\"># 修改后的内容（结束）</span></pre></td></tr></table></figure><h2 id=\"17-git-rm-删除文件\"><a class=\"markdownIt-Anchor\" href=\"#17-git-rm-删除文件\">#</a> 1.7 git rm 删除文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>  <span class=\"token comment\"># 先从工作区删除文件，然后再暂存删除内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>              <span class=\"token comment\"># 从工作区和暂存区中删除文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cached</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>     <span class=\"token comment\"># 从暂存区中删除文件，但工作区中保留文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> <span class=\"token operator\">&lt;</span>dir<span class=\"token operator\">></span>            <span class=\"token comment\"># 删除指定目录下的所有文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 删除后不要忘记使用 git commit 命令提交到本地仓库</span></pre></td></tr></table></figure><h2 id=\"18-gitignore-忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#18-gitignore-忽略文件\">#</a> 1.8 .gitignore 忽略文件</h2>\n<p>一些可以参考的.gitignore 模板：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=\">https://github.com/github/gitignore</span></p>\n<p><img data-src=\"/images/linux/git/1.8.1.jpg\" alt=\"\"></p>\n<p><img data-src=\"/images/linux/git/1.8.2.jpg\" alt=\"\"></p>\n<h1 id=\"二-git-远程操作\"><a class=\"markdownIt-Anchor\" href=\"#二-git-远程操作\">#</a> 二、git 远程操作</h1>\n<h2 id=\"21-ssh-key生成\"><a class=\"markdownIt-Anchor\" href=\"#21-ssh-key生成\">#</a> 2.1 ssh key 生成</h2>\n<p>由于本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以需要配置验证信息。使用以下命令生成 SSH Key：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的邮箱\"</span></pre></td></tr></table></figure><p>之后打开 xxx-rsa.pub (公钥) 文件，复制其中的内容，并添加到 Github 中（一般为 Setting -&gt; SSH and GPG keys -&gt; New SSH key）。</p>\n<h2 id=\"22-本地仓库和远程仓库的同步\"><a class=\"markdownIt-Anchor\" href=\"#22-本地仓库和远程仓库的同步\">#</a> 2.2 本地仓库和远程仓库的同步</h2>\n<p>git 的本地仓库和远程仓库是两个相互独立的仓库，需要使用一种机制来同步本地仓库和远程仓库中的内容，所使用到的命令为  <code>git push</code>  和  <code>git pull</code> 。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>远程仓库别名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>远程仓库地址<span class=\"token operator\">></span>     <span class=\"token comment\"># 添加远程仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span>                                  <span class=\"token comment\"># 查看远程仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">&lt;</span>远程仓库名<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>分支名<span class=\"token operator\">></span>               <span class=\"token comment\"># 把本地仓库的修改推送给远程仓库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>远程仓库名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>远程分支名<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>本地分支名<span class=\"token operator\">></span> <span class=\"token comment\"># 把远程仓库的修改拉去到本地仓库，远程分支名称和本地分支名称相同时可以省略冒号后面部分</span></pre></td></tr></table></figure><h2 id=\"23-分支简介和基本操作\"><a class=\"markdownIt-Anchor\" href=\"#23-分支简介和基本操作\">#</a> 2.3 分支简介和基本操作</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch                 <span class=\"token comment\"># 查看分支列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch-name            <span class=\"token comment\"># 创建分支</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> switch branch-name     <span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> merge branch-name      <span class=\"token comment\"># 合并分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> branch-name  <span class=\"token comment\"># 删除分支（已合并）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> branch-name  <span class=\"token comment\"># 删除分支（未合并）</span></pre></td></tr></table></figure>",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/22/linux/linux_nvidia/",
            "url": "http://qianqiu-cell.github.io/2024/10/22/linux/linux_nvidia/",
            "title": "Ubuntu 20.04 Nvidia驱动安装",
            "date_published": "2024-10-21T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3phdGFqaS9hcnRpY2xlL2RldGFpbHMvMTIzMTA0NTY5\">https://blog.csdn.net/zataji/article/details/123104569</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nob2ltcm9jL2FydGljbGUvZGV0YWlscy8xMDQ2MzA0OTEjOn46dGV4dD1XQVJOSU5HJTNBJTIwVW5hYmxlJTIwdG8lMjBkZXRlcm1pbmUlMjB0aGUlMjBwYXRoJTIwdG8lMjBpbnN0YWxsLGxpYnJhcmllcyUyMGluc3RhbGxlZCUyQyUyMG9yJTIwc3BlY2lmeSUyMGElMjBwYXRoJTIwd2l0aCUyMC0tZ2x2bmQtZWdsLWNvbmZpZy1wYXRoLg==\">https://blog.csdn.net/choimroc/article/details/104630491#:~:text=WARNING%3A Unable to determine the path to install,libraries installed%2C or specify a path with --glvnd-egl-config-path.</span></p>\n<h1 id=\"一-禁用-nouveau驱动\"><a class=\"markdownIt-Anchor\" href=\"#一-禁用-nouveau驱动\">#</a> 一、禁用 nouveau 驱动</h1>\n<p>因为 NVIDIA 的官方驱动和系统自带的 nouveau 驱动冲突，所以需要先禁用。</p>\n<p>编辑文件 <code>/etc/modprobe.d/blacklist-nouveau.conf</code></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/modprobe.d/blacklist-nouveau.conf</pre></td></tr></table></figure><p>并在文件末尾添加以下内容：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>blacklist nouveau</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>options nouveau <span class=\"token assign-left variable\">modeset</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></table></figure><p>执行以下命令使禁用生效并且重启</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> update-initramfs <span class=\"token parameter variable\">-u</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span></pre></td></tr></table></figure><p>重启后验证是否生效， 执行命令，若没有输出，则禁用生效</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lsmod <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> nouveau</pre></td></tr></table></figure><h1 id=\"二-安装-nvidia驱动\"><a class=\"markdownIt-Anchor\" href=\"#二-安装-nvidia驱动\">#</a> 二、安装 NVIDIA 驱动</h1>\n<p>根据显卡的参数到<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnZpZGlhLmNvbS9lbi11cy9kcml2ZXJzLw==\"> NVIDIA 官网</span>查询显卡匹配的驱动版本。目前所使用惠普电脑所使用的显卡型号为 GeForce RTX 3050。</p>\n<p>下载好驱动，执行命令进行安装。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">su</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> NVIDIA-Linux-x86_64-550.120.run</pre></td></tr></table></figure><h1 id=\"三-验证\"><a class=\"markdownIt-Anchor\" href=\"#三-验证\">#</a> 三、验证</h1>\n<p>输入命令 <code>nvidia-smi</code> ，验证是否安装成功，如果安装成功，会出现显卡的相关信息</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@ember-Victus-by-HP-Laptop:/home/ember/下载<span class=\"token comment\"># nvidia-smi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Tue Oct <span class=\"token number\">22</span> 01:17:32 <span class=\"token number\">2024</span>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-----------------------------------------------------------------------------------------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span> NVIDIA-SMI <span class=\"token number\">550.120</span>                Driver Version: <span class=\"token number\">550.120</span>        CUDA Version: <span class=\"token number\">12.4</span>     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>-----------------------------------------+------------------------+----------------------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> GPU  Name                 Persistence-M <span class=\"token operator\">|</span> Bus-Id          Disp.A <span class=\"token operator\">|</span> Volatile Uncorr. ECC <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> Fan  Temp   Perf          Pwr:Usage/Cap <span class=\"token operator\">|</span>           Memory-Usage <span class=\"token operator\">|</span> GPU-Util  Compute M. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>                                         <span class=\"token operator\">|</span>                        <span class=\"token operator\">|</span>               MIG M. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">0</span>  NVIDIA GeForce RTX <span class=\"token number\">3050</span> <span class=\"token punctuation\">..</span>.    Off <span class=\"token operator\">|</span>   00000000:01:00.0 Off <span class=\"token operator\">|</span>                  N/A <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> N/A   44C    P0             13W /   60W <span class=\"token operator\">|</span>       1MiB /   4096MiB <span class=\"token operator\">|</span>      <span class=\"token number\">6</span>%      Default <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>                                         <span class=\"token operator\">|</span>                        <span class=\"token operator\">|</span>                  N/A <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+-----------------------------------------+------------------------+----------------------+</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                                                                         </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+-----------------------------------------------------------------------------------------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span> Processes:                                                                              <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>  GPU   GI   CI        PID   Type   Process name                              GPU Memory <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span>        ID   ID                                                               Usage      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">|</span>  No running processes found                                                             <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>+-----------------------------------------------------------------------------------------+</pre></td></tr></table></figure><p>在 python 中执行</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> torch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>程序输出 <code>True</code> ，则说明安装成功。</p>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/20/linux/docker/",
            "url": "http://qianqiu-cell.github.io/2024/10/20/linux/docker/",
            "title": "docker",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZQ==\">https://yeasy.gitbook.io/docker_practice</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlSV3NlMUVTRC8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljaw==\">https://www.bilibili.com/video/BV1YRWse1ESD/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click</span></p>\n<h1 id=\"一-docker简介\"><a class=\"markdownIt-Anchor\" href=\"#一-docker简介\">#</a> 一、Docker 简介</h1>\n<h2 id=\"11-什么是docker\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是docker\">#</a> 1.1 什么是 docker</h2>\n<p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>\n<p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p>\n<p><img data-src=\"/images/linux/docker/1.1.png\" alt=\"\"></p>\n<h2 id=\"12-为什么要用docker\"><a class=\"markdownIt-Anchor\" href=\"#12-为什么要用docker\">#</a> 1.2 为什么要用 docker</h2>\n<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li>更高效的利用系统资源</li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li>更快速的启动时间</li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li>一致的运行环境</li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。</p>\n<ul>\n<li>持续交付和部署</li>\n</ul>\n<p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>\n<p>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成 (Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署 (Continuous Delivery/Deployment) 系统进行自动部署。</p>\n<p>而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p>\n<ul>\n<li>更轻松的迁移</li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li>更轻松的维护和扩展</li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li>对比传统虚拟机总结</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>容器</th>\n<th>虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td>硬盘使用</td>\n<td>一般为 MB</td>\n<td>一般为 GB</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>接近原生</td>\n<td>弱于</td>\n</tr>\n<tr>\n<td>系统支持量</td>\n<td>单机支持上千个容器</td>\n<td>一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"二-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#二-基本概念\">#</a> 二、基本概念</h1>\n<p><img data-src=\"/images/linux/docker/2.1.jpeg\" alt=\"\"></p>\n<h2 id=\"21-镜像\"><a class=\"markdownIt-Anchor\" href=\"#21-镜像\">#</a> 2.1 镜像</h2>\n<p>我们都知道，操作系统分为<strong>内核</strong> 和<strong>用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 <strong>Docker 镜像（Image），就相当于是一个 root 文件系统</strong>。比如官方镜像 Ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。Docker 镜像<strong>不包含任何动态数据，其内容在构建之后也不会被改变</strong>。</p>\n<h2 id=\"22-容器\"><a class=\"markdownIt-Anchor\" href=\"#22-容器\">#</a> 2.2 容器</h2>\n<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的<strong>类</strong>和<strong>实例</strong>一样，<strong>镜像是静态的定义，容器是镜像运行时的实体</strong>。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>\n<h2 id=\"23-仓库\"><a class=\"markdownIt-Anchor\" href=\"#23-仓库\">#</a> 2.3 仓库</h2>\n<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<strong>Docker Registry</strong> 就是这样的服务。</p>\n<p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（Repository）；每个仓库可以包含多个 <strong>标签</strong>（Tag）；每个标签对应一个镜像。</p>\n<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt; 标签 &gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>\n<p>最常使用的 Registry 公开服务是官方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\"> Docker Hub</span>，这也是默认的 Registry，并拥有大量的高质量的 官方镜像。</p>\n<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。</p>\n<h1 id=\"三-使用镜像\"><a class=\"markdownIt-Anchor\" href=\"#三-使用镜像\">#</a> 三、使用镜像</h1>\n<h2 id=\"31-获取镜像\"><a class=\"markdownIt-Anchor\" href=\"#31-获取镜像\">#</a> 3.1 获取镜像</h2>\n<p>从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker pull <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Docker Registry 地址<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>端口号<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">]</span>仓库名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>标签<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>\n<p>具体的选项可以通过 docker pull --help 命令看到</p>\n</li>\n<li>\n<p>Docker 镜像仓库地址：地址的格式一般是 &lt;域名 / IP&gt;[: 端口号]。默认地址是 Docker Hub (<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>)。</p>\n</li>\n<li>\n<p>仓库名：仓库名是两段式名称，即 &lt;用户名&gt;/&lt; 软件名 &gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</p>\n</li>\n</ul>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker pull ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">18.04</span><span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>ubuntu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7c457f213c76<span class=\"token punctuation\">:</span> Pull complete </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Digest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>152dc042452c496007f07ca9127571cb9c29697f42acbfad72324b2bb2e43c98</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Status<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>docker<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>library<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span></pre></td></tr></table></figure><h2 id=\"32-列出镜像\"><a class=\"markdownIt-Anchor\" href=\"#32-列出镜像\">#</a> 3.2 列出镜像</h2>\n<p>要想列出已经下载下来的镜像，可以使用  <code>docker image ls</code>  或者  <code>docker images</code>  命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago    <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago   <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago   <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker image ls</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago    <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago   <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago   <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$</pre></td></tr></table></figure><p>列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。</p>\n<p>其他显示 docker 镜像的命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker system df <span class=\"token comment\"># 查看镜像、容器、数据卷所占用的空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker image ls ubuntu <span class=\"token comment\"># 根据仓库名列出镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker image ls ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token comment\">#列出特定的某个镜像</span></pre></td></tr></table></figure><h2 id=\"33-运行镜像\"><a class=\"markdownIt-Anchor\" href=\"#33-运行镜像\">#</a> 3.3 运行镜像</h2>\n<p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 ubuntu:18.04 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span><span class=\"token operator\">-</span>rm ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@e9a46d9a85a7<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># cat /etc/os-release</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NAME<span class=\"token operator\">=</span><span class=\"token string\">\"Ubuntu\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VERSION<span class=\"token operator\">=</span><span class=\"token string\">\"18.04.6 LTS (Bionic Beaver)\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ID<span class=\"token operator\">=</span>ubuntu</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ID_LIKE<span class=\"token operator\">=</span>debian</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PRETTY_NAME<span class=\"token operator\">=</span><span class=\"token string\">\"Ubuntu 18.04.6 LTS\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>VERSION_ID<span class=\"token operator\">=</span><span class=\"token string\">\"18.04\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HOME_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.ubuntu.com/\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SUPPORT_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://help.ubuntu.com/\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BUG_REPORT_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://bugs.launchpad.net/ubuntu/\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PRIVACY_POLICY_URL<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>VERSION_CODENAME<span class=\"token operator\">=</span>bionic</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>UBUNTU_CODENAME<span class=\"token operator\">=</span>bionic</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>root@e9a46d9a85a7<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$</pre></td></tr></table></figure><p>docker run 就是运行容器的命令，主要使用到的参数如下</p>\n<ul>\n<li>\n<p>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</p>\n</li>\n<li>\n<p>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。</p>\n</li>\n<li>\n<p>ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。</p>\n</li>\n<li>\n<p>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</p>\n</li>\n</ul>\n<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 18.04.1 LTS 系统。</p>\n<p>最后我们通过 exit 退出了这个容器。</p>\n<p><img data-src=\"/images/linux/docker/3.1.png\" alt=\"\"></p>\n<h2 id=\"34-删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#34-删除镜像\">#</a> 3.4 删除镜像</h2>\n<p>如果要删除本地的镜像，可以使用 docker image rm 命令，其格式为：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ docker image rm <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>镜像<span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>镜像<span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>其中，&lt;镜像&gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。我们可以用镜像的完整 ID，也称为长 ID，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用短 ID 来删除镜像。docker image ls 默认列出的就已经是短 ID 了，一般取前 3 个字符以上，只要足够区分于别的镜像就可以了。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker image rm <span class=\"token number\">501</span> <span class=\"token comment\"># 使用短 ID 来删除镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker image rm centos <span class=\"token comment\"># 使用镜像名 & lt; 仓库名 >:&lt; 标签 > 来删除镜像</span></pre></td></tr></table></figure><h2 id=\"35-制作镜像\"><a class=\"markdownIt-Anchor\" href=\"#35-制作镜像\">#</a> 3.5 制作镜像</h2>\n<p>(1) docker commit</p>\n<p>todo</p>\n<p>(2) Dockerfile</p>\n<p>todo</p>\n<h1 id=\"四-操作容器\"><a class=\"markdownIt-Anchor\" href=\"#四-操作容器\">#</a> 四、操作容器</h1>\n<h2 id=\"41-启动容器\"><a class=\"markdownIt-Anchor\" href=\"#41-启动容器\">#</a> 4.1 启动容器</h2>\n<p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</p>\n<p>（1）新建并启动</p>\n<p>所需要的命令主要为 <code>docker run</code> 。</p>\n<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>it ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> bash</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root@c28d053628f4<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># pwd</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>root@c28d053628f4<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">bin</span>   dev  home  lib64  mnt  proc  run   srv  tmp  var</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>boot  etc  lib   media  opt  root  sbin  sys  usr</pre></td></tr></table></figure><p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>\n<p>检查本地是否存在指定的镜像，不存在就从 registry 下载</p>\n</li>\n<li>\n<p>利用镜像创建并启动一个容器</p>\n</li>\n<li>\n<p>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</p>\n</li>\n<li>\n<p>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</p>\n</li>\n<li>\n<p>从地址池配置一个 ip 地址给容器</p>\n</li>\n<li>\n<p>执行用户指定的应用程序</p>\n</li>\n<li>\n<p>执行完毕后容器被终止</p>\n</li>\n</ul>\n<p>（2）启动已终止的容器</p>\n<p>可以利用 <code>docker container start</code>  命令，直接将一个已经终止（exited）的容器启动运行。</p>\n<h2 id=\"42-查看正在运行中的容器\"><a class=\"markdownIt-Anchor\" href=\"#42-查看正在运行中的容器\">#</a> 4.2 查看正在运行中的容器</h2>\n<p>可以通过 <code>docker container ls</code>  或者 <code>docker ps</code>  命令来查看容器信息。不添加 <code>-a</code>  参数表示仅查询正在运行的容器，添加 <code>-a</code>  参数表示查询所有容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f46a0966d2f0   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">2</span> minutes ago   Up <span class=\"token number\">2</span> minutes             pedantic_ride</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED              STATUS                          PORTS     NAMES</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f46a0966d2f0   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">35</span> seconds ago       Up <span class=\"token number\">34</span> seconds                             pedantic_ride</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2017ea1579ba   ubuntu                   <span class=\"token string\">\"bash\"</span>                    About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             heuristic_ritchie</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a6ebe91f0963   ubuntu                   <span class=\"token string\">\"bash\"</span>                    About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             funny_ganguly</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>1ea1d2fdc98f   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               About a minute ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About a minute ago             fervent_antonelli</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a22936923b9   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">3</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span> minutes ago                  keen_galois</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>42ef1554542d   ubuntu                   <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">4</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                  affectionate_torvalds</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>af4b52cb7f4d   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">4</span> minutes ago        Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                  modest_ritchie</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">9004e2682944</span>   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">29</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">25</span> minutes ago                 suspicious_shockley</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>f2ee1fb9dbd3   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">36</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">36</span> minutes ago                 focused_ride</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>9de4edc03c66   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">37</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">37</span> minutes ago                 loving_poincare</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>c28d053628f4   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">40</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">37</span> minutes ago                 nifty_diffie</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>482b8943345d   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">41</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">41</span> minutes ago                 agitated_galois</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>e56c41136583   hello<span class=\"token operator\">-</span>world              <span class=\"token string\">\"/hello\"</span>                  <span class=\"token number\">2</span> hours ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span> hours ago                    vibrant_carver</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>066f72347a3b   pytorch<span class=\"token operator\">/</span>pytorch          <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">3</span> days ago           Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> days ago                     dazzling_poitras</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>a1d4426c8152   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                  confident_edison</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>51dd9da96e61   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                    nervous_williamson</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>9c03918a1e27   pytorch<span class=\"token operator\">/</span>pytorch<span class=\"token punctuation\">:</span>latest   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">12</span> days ago                    test</pre></td></tr></table></figure><h2 id=\"43-守护态运行\"><a class=\"markdownIt-Anchor\" href=\"#43-守护态运行\">#</a> 4.3 守护态运行</h2>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。下面举两个例子来说明一下。</p>\n<p>如果不使用 -d 参数运行容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>容器会把输出的结果 (STDOUT) 打印到宿主机上面。如果使用了 -d 参数运行容器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>d ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span> <span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>echo <span class=\"token string\">'Hello world'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f2ee1fb9dbd3936b7cdc2e7dac5a53e86e5e8122acb0dcef43ba4fc47ea6ccb6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker logs f2ee1fb9dbd3936b7cdc2e7dac5a53e86e5e8122acb0dcef43ba4fc47ea6ccb6</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello world</pre></td></tr></table></figure><p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面 (输出结果可以用 docker logs 查看)。</p>\n<h2 id=\"44-进入容器\"><a class=\"markdownIt-Anchor\" href=\"#44-进入容器\">#</a> 4.4 进入容器</h2>\n<p>在使用 <code>-d</code>  参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code>  命令或 <code>docker exec</code>  命令，推荐使用 <code>docker exec</code>  命令。</p>\n<p>（1） <code>attach</code>  命令</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>dit ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>9004e2682944ba4750772867e417a04348f1ff8b4bd8f83e629ef2052bf66844</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">9004e2682944</span>   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">49</span> seconds ago   Up <span class=\"token number\">48</span> seconds             suspicious_shockley</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker attach <span class=\"token number\">9004</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@<span class=\"token number\">9004e2682944</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</pre></td></tr></table></figure><p>注意： 如果从这个 stdin 中  <code>exit</code> ，会导致容器的停止。</p>\n<p>注：标准输入文件（stdin），通常对应终端的键盘；标准输出文件（stdout）和标准错误输出文件（stderr），这两个文件都对应终端的屏幕。</p>\n<p>（2） <code>exec</code>  命令</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>dit ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>7d49eb33ae2cca32be243690101b7640b312dee06f76f7fb083970410ccb0c76</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">7</span> seconds ago   Up <span class=\"token number\">7</span> seconds             modest_saha</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker <span class=\"token keyword\">exec</span> <span class=\"token operator\">-</span>it 7d49 bash</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@7d49eb33ae2c<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">3</span> minutes ago   Up <span class=\"token number\">3</span> minutes             modest_saha</pre></td></tr></table></figure><p>如果从这个 stdin 中 <code>exit</code> ，不会导致容器的停止。这就是为什么推荐使用 <code>docker exec</code>  的原因。</p>\n<h2 id=\"45-停止容器\"><a class=\"markdownIt-Anchor\" href=\"#45-停止容器\">#</a> 4.5 停止容器</h2>\n<p>可以使用 <code>docker container stop</code>  来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED             STATUS                         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f2ee1fb9dbd3   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">3</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> minutes ago                 focused_ride</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>9de4edc03c66   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">4</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                 loving_poincare</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c28d053628f4   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">8</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                 nifty_diffie</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>482b8943345d   ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>             <span class=\"token string\">\"/bin/echo 'Hello wo…\"</span>   <span class=\"token number\">9</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">9</span> minutes ago                 agitated_galois</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e56c41136583   hello<span class=\"token operator\">-</span>world              <span class=\"token string\">\"/hello\"</span>                  About an hour ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About an hour ago             vibrant_carver</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>066f72347a3b   pytorch<span class=\"token operator\">/</span>pytorch          <span class=\"token string\">\"bash\"</span>                    <span class=\"token number\">3</span> days ago          Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> days ago                    dazzling_poitras</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a1d4426c8152   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                 confident_edison</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>51dd9da96e61   bbb948040751             <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">11</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> days ago                   nervous_williamson</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>9c03918a1e27   pytorch<span class=\"token operator\">/</span>pytorch<span class=\"token punctuation\">:</span>latest   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> days ago         Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">12</span> days ago                   test</pre></td></tr></table></figure><p>处于终止状态的容器，可以通过 <code>docker container start</code>  命令来重新启动。</p>\n<p>此外， <code>docker container restart</code>  命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h2 id=\"46-导出和导入\"><a class=\"markdownIt-Anchor\" href=\"#46-导出和导入\">#</a> 4.6 导出和导入</h2>\n<p>（1）导出容器</p>\n<p>如果要导出本地某个容器，可以使用 <code>docker export</code>  命令。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7d49eb33ae2c   ubuntu    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">3</span> minutes ago   Up <span class=\"token number\">3</span> minutes             modest_saha</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker export 7d49 <span class=\"token operator\">></span> <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>ember<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">.</span>tar</pre></td></tr></table></figure><p>这样将导出容器快照到本地文件。</p>\n<p>（2）导入容器快照</p>\n<p>可以使用 <code>docker import</code>  从容器快照文件中再导入为镜像，例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ cat <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>ember<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">.</span>tar <span class=\"token operator\">|</span> docker <span class=\"token keyword\">import</span> <span class=\"token operator\">-</span> test<span class=\"token operator\">/</span>ubuntu<span class=\"token punctuation\">:</span>v1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sha256<span class=\"token punctuation\">:</span>819f39358ac6614e347c95e5ab2f948fae449b11e12c045a429a4ff0ad3c2c89</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker images</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>test<span class=\"token operator\">/</span>ubuntu       v1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span>      819f39358ac6   <span class=\"token number\">23</span> seconds ago   <span class=\"token number\">78</span><span class=\"token punctuation\">.</span>1MB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ubuntu            latest    59ab366372d5   <span class=\"token number\">9</span> days ago       <span class=\"token number\">78</span><span class=\"token punctuation\">.</span>1MB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pytorch<span class=\"token operator\">/</span>pytorch   latest    bbb948040751   <span class=\"token number\">8</span> months ago     <span class=\"token number\">7</span><span class=\"token punctuation\">.</span>6GB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ubuntu            <span class=\"token number\">18.04</span>     f9a80a55f492   <span class=\"token number\">16</span> months ago    <span class=\"token number\">63</span><span class=\"token punctuation\">.</span>2MB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hello<span class=\"token operator\">-</span>world       latest    d2c94e258dcb   <span class=\"token number\">17</span> months ago    <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB</pre></td></tr></table></figure><h2 id=\"47-删除容器\"><a class=\"markdownIt-Anchor\" href=\"#47-删除容器\">#</a> 4.7 删除容器</h2>\n<p>可以使用 <code>docker container rm</code>  来删除一个处于终止状态的容器。例如</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED          STATUS                        PORTS     NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>7d49eb33ae2c   ubuntu                   <span class=\"token string\">\"/bin/bash\"</span>               <span class=\"token number\">12</span> minutes ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">11</span> seconds ago             modest_saha</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container rm 7d49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7d49</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember<span class=\"token operator\">-</span>Victus<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>HP<span class=\"token operator\">-</span>Laptop<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker container ls <span class=\"token operator\">-</span>a</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CONTAINER ID   IMAGE                    COMMAND                   CREATED          STATUS                      PORTS     NAMES</pre></td></tr></table></figure><h1 id=\"五-访问仓库\"><a class=\"markdownIt-Anchor\" href=\"#五-访问仓库\">#</a> 五、访问仓库</h1>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search <span class=\"token comment\"># 查找官方仓库中的镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull <span class=\"token comment\"># 拉取官方镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker push <span class=\"token comment\"># 将镜像推送到仓库</span></pre></td></tr></table></figure><p>私有仓库：todo</p>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/20/linux/nekoray/",
            "url": "http://qianqiu-cell.github.io/2024/10/20/linux/nekoray/",
            "title": "linux翻墙操作",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FZjhqdUVuRkFGSQ==\">https://www.youtube.com/watch?v=Ef8juEnFAFI</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hVmNGUVU4Rk85OA==\">https://www.youtube.com/watch?v=aVcFQU8FO98</span></p>\n<h1 id=\"下载gdebi可选\"><a class=\"markdownIt-Anchor\" href=\"#下载gdebi可选\">#</a> 下载 gdebi（可选）</h1>\n<p>（1）传统软件套间管理工具 dpkg</p>\n<p>dpkg 是 Debian package 的简写，为”Debian“ 操作系统 专门开发的套件管理系统，用于软件的安装，更新和移除。</p>\n<p>所有源自 &quot;Debian&quot; 的 Linux 的发行版都使用 dpkg, 例如 &quot;Ubuntu&quot;</p>\n<p>首先，要安装 dpkg 软件管理工具。</p>\n<pre><code>sudo apt-get install dpkg  // 原始默认不安装，需要用户手动安装\n</code></pre>\n<p>接着，使用 dpkg 命令安装 deb 安装包。</p>\n<pre><code>sudo dpkg -i name.deb  // 安装name.deb的安装包\n</code></pre>\n<p>（2）现在软件包安装工具 gdebi</p>\n<p>gdebi 是一个用于安装你自己手动下载的包的 GUI 程序。GDebi 也可以命令行模式运行（sudo gdebi name.deb），其功能和 GUI 模式下完全一样。</p>\n<p>首先，要安装 gdebi，可以使用以下命令（或者在 ubuntu software 中搜索 gdebi）：</p>\n<pre><code>sudo apt-get install gdebi\n</code></pre>\n<p>接着 gdebi 安装.deb 安装包</p>\n<pre><code>sudo gdebi name.deb\n</code></pre>\n<h1 id=\"下载nrekoray-linux版本客户端\"><a class=\"markdownIt-Anchor\" href=\"#下载nrekoray-linux版本客户端\">#</a> 下载 Nrekoray-linux 版本客户端</h1>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hdHN1cmlEYXlvL25la29yYXkvdHJlZS80LjAtYmV0YTM=\"> github 页面</span>，选择 x64 版本的 AppImage 文件。</p>\n<p>通过 <code>chmod +x</code>  命令，为 AppImage 文件设置执行权限。</p>\n<p>可以使用以下两种方法进行 Nrekoray 软件的启动：</p>\n<ul>\n<li>直接点击 AppImage 文件，即可启动软件。</li>\n<li>在命令行使用如下命令： <code>./nekoray-4.0-beta3-2024-07-13-linux-x64.AppImage</code> 。</li>\n</ul>\n<h1 id=\"设置订阅信息\"><a class=\"markdownIt-Anchor\" href=\"#设置订阅信息\">#</a> 设置订阅信息</h1>\n<ul>\n<li>在 rokoray 中，依次点击首选项 - 分组，打开分组界面</li>\n<li>点击新建分组，名称自定义，类型选择订阅，之后输入订阅 URL</li>\n</ul>\n<p><img data-src=\"/images/linux/nekoray/1.png\" alt=\"\"></p>\n<h1 id=\"获取url\"><a class=\"markdownIt-Anchor\" href=\"#获取url\">#</a> 获取 URL</h1>\n<p>目前使用的是 ikuuu 的订阅连接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pa3V1dS5wdy91c2Vy\">https://ikuuu.pw/user</span>，获得 URL 的位置如下：</p>\n<p><img data-src=\"/images/linux/nekoray/2.png\" alt=\"\"></p>\n<p>其他一些可以参考的机场：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZmFmMi5zdGMtc3BhcmUxLmNvbS91c2Vy\">https://afaf2.stc-spare1.com/user</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tbWVzMzU4YWNnbTk5bC5jb20vIy9yZWdpc3Rlcj9jb2RlPWZkQlJlYnlz\">https:// 极速机场.com/#/register?code=fdBRebys</span></p>\n<p>每一次重新启动后都需要重新获取订阅。</p>\n<h1 id=\"安装-clash-verge\"><a class=\"markdownIt-Anchor\" href=\"#安装-clash-verge\">#</a> 安装 Clash Verge</h1>\n<p>链接：[Clash Verge]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NsYXNoLXZlcmdlLXJldi9jbGFzaC12ZXJnZS1yZXY=\">https://github.com/clash-verge-rev/clash-verge-rev</span></p>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/20/linux/linux_command/",
            "url": "http://qianqiu-cell.github.io/2024/10/20/linux/linux_command/",
            "title": "Linux常用命令",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDIyMzAwL2FydGljbGUvZGV0YWlscy8xMDQ2NDUwNzI=\">https://blog.csdn.net/m0_46422300/article/details/104645072</span></p>\n<h1 id=\"一-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#一-基础知识\">#</a> 一、基础知识</h1>\n<h2 id=\"11-linux系统的文件结构\"><a class=\"markdownIt-Anchor\" href=\"#11-linux系统的文件结构\">#</a> 1.1 Linux 系统的文件结构</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/bin        <span class=\"token comment\"># 二进制文件，系统常规命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/boot       <span class=\"token comment\"># 系统启动分区，系统启动时读取的文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/dev        <span class=\"token comment\"># 设备文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/etc        <span class=\"token comment\"># 大多数配置文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/home       <span class=\"token comment\"># 普通用户的家目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/lib        <span class=\"token comment\"># 32 位函数库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/lib64      <span class=\"token comment\"># 64 位库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/media      <span class=\"token comment\"># 手动临时挂载点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/mnt        <span class=\"token comment\"># 手动临时挂载点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>/opt        <span class=\"token comment\"># 第三方软件安装位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/proc       <span class=\"token comment\"># 进程信息及硬件信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/root       <span class=\"token comment\"># 临时设备的默认挂载点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>/sbin       <span class=\"token comment\"># 系统管理命令</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>/srv        <span class=\"token comment\"># 数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/var        <span class=\"token comment\"># 数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/sys        <span class=\"token comment\"># 内核相关信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>/tmp        <span class=\"token comment\"># 临时文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>/usr        <span class=\"token comment\"># 用户相关设定</span></pre></td></tr></table></figure><h2 id=\"12-linux系统命令行的含义\"><a class=\"markdownIt-Anchor\" href=\"#12-linux系统命令行的含义\">#</a> 1.2 Linux 系统命令行的含义</h2>\n<p>示例： <code>ember@ember-Victus-by-HP-Laptop:~$</code></p>\n<ul>\n<li>ember    // 用户名，若为 root，则为超级用户</li>\n<li>@       // 分隔符</li>\n<li>ember-Victus-by-HP-Laptop   // 主机名称</li>\n<li>~       // 当前所在目录，默认用户目录为～，会随着目录切换而变化</li>\n<li>$       // 表示当前用户是普通用户，超级用户为 #，例如：（“root@ember-Victus-by-HP-Laptop:/home/ember#” ，表示使用超级用户访问 /home/ember 文件夹）</li>\n</ul>\n<p>使用 sudo su 和 su name 可以切换普通用户和超级用户。同时，exit 命令也可以退出当前用户。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember-Victus-by-HP-Laptop:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">su</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> ember 的密码： </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root@ember-Victus-by-HP-Laptop:/home/ember<span class=\"token comment\"># su ember</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember-Victus-by-HP-Laptop:~$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>root@ember-Victus-by-HP-Laptop:/home/ember<span class=\"token comment\"># su ember</span></pre></td></tr></table></figure><h2 id=\"13-命令的组成\"><a class=\"markdownIt-Anchor\" href=\"#13-命令的组成\">#</a> 1.3 命令的组成</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令 参数名 参数值</pre></td></tr></table></figure><h1 id=\"二-目录操作\"><a class=\"markdownIt-Anchor\" href=\"#二-目录操作\">#</a> 二、目录操作</h1>\n<h2 id=\"21-切换目录cd\"><a class=\"markdownIt-Anchor\" href=\"#21-切换目录cd\">#</a> 2.1 切换目录（cd）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /                 //切换到根目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> /bin              //切换到根目录下的bin目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/               //切换到上一级目录 或者使用命令：cd <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> ~                 //切换到home目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> -                 //切换到上次访问的目录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> xx<span class=\"token punctuation\">(</span>文件夹名<span class=\"token punctuation\">)</span>       //切换到本目录下的名为xx的文件目录，如果目录不存在报错</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin class-name\">cd</span> /xxx/xx/x         //可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全</pre></td></tr></table></figure><h2 id=\"22-查看目录ls\"><a class=\"markdownIt-Anchor\" href=\"#22-查看目录ls\">#</a> 2.2 查看目录（ls）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span>                   //查看当前目录下的所有目录和文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span>                //查看当前目录下的所有目录和文件（包括隐藏的文件）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>                //列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令<span class=\"token string\">\"ll\"</span>效果一样</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">ls</span> /bin              //查看指定目录下的所有目录和文件</pre></td></tr></table></figure><h2 id=\"23-创建目录mkdir\"><a class=\"markdownIt-Anchor\" href=\"#23-创建目录mkdir\">#</a> 2.3 创建目录（mkdir）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> tools          //在当前目录下创建一个名为tools的目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">mkdir</span> /bin/tools     //在指定目录下创建一个名为tools的目录</pre></td></tr></table></figure><h2 id=\"24-删除目录与文件\"><a class=\"markdownIt-Anchor\" href=\"#24-删除目录与文件\">#</a> 2.4 删除目录与文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> 文件名              //删除当前目录下的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> 文件名           //删除当前目录的的文件（不询问）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> 文件夹名         //递归删除当前目录下的目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> 文件夹名        //递归删除当前目录下的目录（不询问）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> *              //将当前目录下的所有目录和文件全部删除</pre></td></tr></table></figure><h2 id=\"25-移动目录mv\"><a class=\"markdownIt-Anchor\" href=\"#25-移动目录mv\">#</a> 2.5 移动目录（mv）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> 当前目录名 新目录名        //修改目录名，同样适用于文件操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">mv</span> /usr/tmp/tool /opt       //将/usr/tmp目录下的tool目录剪切到 /opt目录下面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-r</span> /usr/tmp/tool /opt    //递归剪切目录中所有文件和文件夹</pre></td></tr></table></figure><h2 id=\"26-拷贝目录cp\"><a class=\"markdownIt-Anchor\" href=\"#26-拷贝目录cp\">#</a> 2.6 拷贝目录（cp）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /usr/tmp/tool /opt       //将/usr/tmp目录下的tool目录复制到 /opt目录下面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> /usr/tmp/tool /opt    //递归剪复制目录中所有文件和文件夹</pre></td></tr></table></figure><h2 id=\"27-搜索目录find\"><a class=\"markdownIt-Anchor\" href=\"#27-搜索目录find\">#</a> 2.7 搜索目录（find）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> /bin <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'a*'</span>        //查找/bin目录下的所有以a开头的文件或者目录</pre></td></tr></table></figure><h2 id=\"28-查看当前目录的绝对路径pwd\"><a class=\"markdownIt-Anchor\" href=\"#28-查看当前目录的绝对路径pwd\">#</a> 2.8 查看当前目录的绝对路径（pwd）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">pwd</span>                         //显示当前位置路径</pre></td></tr></table></figure><h1 id=\"三-文件操作\"><a class=\"markdownIt-Anchor\" href=\"#三-文件操作\">#</a> 三、文件操作</h1>\n<h2 id=\"31-新增文件touch\"><a class=\"markdownIt-Anchor\" href=\"#31-新增文件touch\">#</a> 3.1 新增文件（touch）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span>  a.txt         //在当前目录下创建名为a的txt文件（文件不存在），如果文件存在，将文件时间属性修改为当前系统时间</pre></td></tr></table></figure><h2 id=\"32-删除文件\"><a class=\"markdownIt-Anchor\" href=\"#32-删除文件\">#</a> 3.2 删除文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> 文件名              //删除当前目录下的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> 文件名           //删除当前目录的的文件（不询问）</pre></td></tr></table></figure><h2 id=\"33-编辑文件vi-vim\"><a class=\"markdownIt-Anchor\" href=\"#33-编辑文件vi-vim\">#</a> 3.3 编辑文件（vi, vim）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> 文件名              //打开需要编辑的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  --进入后，操作界面有三种模式：命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  命令模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  -刚进入文件就是命令模式，通过方向键控制光标位置，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  -使用命令<span class=\"token string\">\"dd\"</span>删除当前整行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  -使用命令<span class=\"token string\">\"/字段\"</span>进行查找</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  -按<span class=\"token string\">\"i\"</span>在光标所在字符前开始插入</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  -按<span class=\"token string\">\"a\"</span>在光标所在字符后开始插入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  -按<span class=\"token string\">\"o\"</span>在光标所在行的下面另起一新行插入</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  -按<span class=\"token string\">\"：\"</span>进入底行模式</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  插入模式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  -此时可以对文件内容进行编辑，左下角会显示 <span class=\"token string\">\"-- 插入 --\"</span>\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  -按<span class=\"token string\">\"ESC\"</span>进入底行模式</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  底行模式</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  -退出编辑：      :q</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  -强制退出：      :q<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  -保存并退出：    :wq</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">## 操作步骤示例 ##</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token number\">1</span>.保存文件：按<span class=\"token string\">\"ESC\"</span> -<span class=\"token operator\">></span> 输入<span class=\"token string\">\":\"</span> -<span class=\"token operator\">></span> 输入<span class=\"token string\">\"wq\"</span>,回车     //保存并退出编辑</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token number\">2</span>.取消操作：按<span class=\"token string\">\"ESC\"</span> -<span class=\"token operator\">></span> 输入<span class=\"token string\">\":\"</span> -<span class=\"token operator\">></span> 输入<span class=\"token string\">\"q!\"</span>,回车     //撤销本次修改并退出编辑</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">## 补充 ##</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">vim</span> +10 filename.txt                   //打开文件并跳到第10行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">vim</span> <span class=\"token parameter variable\">-R</span> /etc/passwd                     //以只读模式打开文件</pre></td></tr></table></figure><h2 id=\"34-查看文件内容cat\"><a class=\"markdownIt-Anchor\" href=\"#34-查看文件内容cat\">#</a> 3.4 查看文件内容（cat）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> a.txt          //查看文件最后一屏内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">less</span> a.txt         //PgUp向上翻页，PgDn向下翻页，<span class=\"token string\">\"q\"</span>退出查看</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">more</span> a.txt         //显示百分比，回车查看下一行，空格查看下一页，<span class=\"token string\">\"q\"</span>退出查看</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-100</span> a.txt    //查看文件的后100行，<span class=\"token string\">\"Ctrl+C\"</span>退出查看</pre></td></tr></table></figure><h2 id=\"35-文件重定向\"><a class=\"markdownIt-Anchor\" href=\"#35-文件重定向\">#</a> 3.5 文件重定向（&gt; ，&gt;&gt; ）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> a.txt <span class=\"token operator\">></span> b.txt    //将文件a的内容复制到文件b中，文件b不存在则创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">cat</span> a.txt <span class=\"token operator\">>></span> b.txt   //将文件a的内容追加到文件b中，文件b不存在则创建</pre></td></tr></table></figure><h1 id=\"四-用户文件权限\"><a class=\"markdownIt-Anchor\" href=\"#四-用户文件权限\">#</a> 四、用户（文件）权限</h1>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x a.txt    //普通授权    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> a.txt   //8421法，1+2+4<span class=\"token operator\">=</span><span class=\"token number\">7</span>，<span class=\"token string\">\"7\"</span>说明授予所有权限</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>说明：sudo命令以系统管理者的身份执行指令，也就是说，经由 <span class=\"token function\">sudo</span> 所执行的指令就好像是 root 亲自执行。需要输入自己账户密码。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  使用权限：在 /etc/sudoers 中有出现的使用者</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-l</span>                              //列出目前的权限</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  $ <span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-u</span> yao <span class=\"token function\">vi</span> ~www/index.html    //以 yao 用户身份编辑 home 目录下www目录中的 index.html 文件</pre></td></tr></table></figure><h1 id=\"五-打包与解压\"><a class=\"markdownIt-Anchor\" href=\"#五-打包与解压\">#</a> 五、打包与解压</h1>\n<h2 id=\"51-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#51-基础知识\">#</a> 5.1 基础知识</h2>\n<ul>\n<li>打包：将多个文件合并成一个文件，大小不变（如 .tar）。</li>\n<li>压缩：将文件体积缩小，通常用于单个文件或打包文件（如 .gz、.bz2）。</li>\n<li>打包和压缩常常结合使用，先打包再压缩，得到像 .tar.gz、.tar.bz2 这样的文件。</li>\n<li>Linux 中的很多压缩程序只能针对一个文件进行压缩。</li>\n</ul>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.zip、.rar        //windows系统中压缩文件的扩展名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  .tar              //Linux中打包文件的扩展名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  .gz               //Linux中压缩文件的扩展名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  .tar.gz           //Linux中打包并压缩文件的扩展名</pre></td></tr></table></figure><p>为了方便用户在打包解包的同时可以压缩或解压文件，tar 提供了一种特殊的功能。这就是 tar 可以在打包或解包的同时调用其它的压缩程序，比如调用 gzip、bzip2 等。</p>\n<p>gzip 是 GNU 组织开发的一个压缩程序，.gz 结尾的文件就是 gzip 压缩的结果。与 gzip 相对的解压程序是 gunzip。tar 中使用 - z 这个参数来调用 gzip。</p>\n<h2 id=\"52-打包文件\"><a class=\"markdownIt-Anchor\" href=\"#52-打包文件\">#</a> 5.2 打包文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.tar：只打包，不压缩文件。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">tar</span> xvf Name.tar                //解包</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">tar</span> cvf Name.tar dirName        //打包</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-rf</span> Name.tar filename       //将文件filename添加到打包文件Name.tar中</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.gz：只压缩，不打包文件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  gunzip Name.gz                  //解压（1）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">gzip</span> <span class=\"token parameter variable\">-d</span> Name.gz                 //解压（2）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">gzip</span> Name                       //压缩</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>.tar.gz：打包压缩文件</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">tar</span> zxvf Name.tar.gz            //解压，解包</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">tar</span> zcvf Name.tar.gz dirName    //打包，压缩</pre></td></tr></table></figure><h1 id=\"六-安装包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#六-安装包管理工具\">#</a> 六、安装包管理工具</h1>\n<p>常见的软件封包类型：</p>\n<table>\n<thead>\n<tr>\n<th>封包类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rpm 软件包</td>\n<td>扩展名以  <code>.rpm</code>  结尾，使用户 redhat 系列</td>\n</tr>\n<tr>\n<td>deb 软件包</td>\n<td>扩展名以  <code>.deb</code>  结尾，适用于 Debian 系列</td>\n</tr>\n<tr>\n<td>源代码软件包</td>\n<td>以  <code>.tar.gz</code>  /  <code>.tar.bz2</code>  格式结尾的压缩包提供包含程序的原始代码文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"61-rpm系列工具\"><a class=\"markdownIt-Anchor\" href=\"#61-rpm系列工具\">#</a> 6.1 RPM 系列工具</h2>\n<p>RPM (Red Hat Package Manager) 系列工具主要用于 Red Hat 系统及其衍生版（如 CentOS、Fedora 等）。常见工具包括 yum 和 rpm。</p>\n<p>RPM 系列包管理工具在大多数 Linux 发行版中都可以使用，包括但不限于 Red Hat, CentOS, Fedora 等。如果在某些 Linux 发行版中无法使用，需要通过相应的包管理工具进行安装。</p>\n<h3 id=\"yum-yellow-dog-update-modifier\"><a class=\"markdownIt-Anchor\" href=\"#yum-yellow-dog-update-modifier\">#</a> yum (Yellow dog Update Modifier)</h3>\n<p>yum 是基于 RPM 的软件包管理器，能够自动处理依赖关系，并从网络仓库下载和安装所需的软件包。它用于简化软件安装、更新和删除的过程。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 yum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> build-essential  <span class=\"token comment\"># 首先安装 build-essential 包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update              <span class=\"token comment\"># 更新软件包列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> yum         <span class=\"token comment\"># 安装 yum</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum check-update             //列出所有可更新的软件清单命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  yum update                   //更新所有软件命令</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  yum <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>   //安装指定的软件命令</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  yum update <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>    //更新指定的软件命令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  yum list                     //列出所有可安裝的软件清单命令</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  yum remove <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>    //删除软件包命令</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  yum search <span class=\"token operator\">&lt;</span>keyword<span class=\"token operator\">></span>         //查找软件包命令</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  yum clean packages:          //清除缓存目录下的软件包</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  yum clean headers:           //清除缓存目录下的 headers</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  yum clean oldheaders:        //清除缓存目录下旧的 headers</pre></td></tr></table></figure><h3 id=\"rpm-redhat-package-manager\"><a class=\"markdownIt-Anchor\" href=\"#rpm-redhat-package-manager\">#</a> rpm (Redhat package manager)</h3>\n<p>rpm 是一个底层的包管理工具，主要用于直接处理 rpm 格式的软件包。它不会处理依赖关系，通常在特殊场景下使用（如离线安装软件）。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">rpm</span>    <span class=\"token comment\"># 安装 rpm</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> package_name.rpm  <span class=\"token comment\"># 安装一个包</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-Uvh</span> package_name.rpm  <span class=\"token comment\"># 升级一个包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-rpm</span> <span class=\"token parameter variable\">-e</span> package_name   <span class=\"token comment\"># 卸载一个包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-q</span> package_name        <span class=\"token comment\"># 查询一个包是否已安装</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span>                    <span class=\"token comment\"># 查询所有已安装的包</span></pre></td></tr></table></figure><h3 id=\"yum-和-rpm-的区别\"><a class=\"markdownIt-Anchor\" href=\"#yum-和-rpm-的区别\">#</a> yum 和 rpm 的区别</h3>\n<p>yum 和 rpm 都是 Linux 中用于软件包管理的工具，但它们的功能和使用场景有所不同。以下是它们的联系和区别：</p>\n<p>（1）联系</p>\n<ul>\n<li>\n<p>包管理系统：两者都与 RPM（Red Hat Package Manager）包管理系统相关，主要用于 Red Hat 及其衍生的 Linux 发行版（如 CentOS、Fedora 等）。</p>\n</li>\n<li>\n<p>软件包格式：yum 和 rpm 都使用 RPM 格式的软件包（.rpm 文件）。</p>\n</li>\n<li>\n<p>共同目的：它们的主要目的是管理软件包的安装、更新和删除。</p>\n</li>\n</ul>\n<p>（2）区别</p>\n<ul>\n<li>\n<p>rpm：是底层的包管理工具，直接用于安装、卸载和查询 RPM 包。它不处理软件包的依赖关系，因此用户需要手动解决任何依赖问题。</p>\n</li>\n<li>\n<p>yum：是一个高级的包管理器，基于 rpm，可以自动处理软件包的依赖关系。yum 可以从配置的远程仓库下载软件包，并自动安装所需的依赖项，是日常使用中更常用的工具。</p>\n</li>\n</ul>\n<p>（3）总结</p>\n<ul>\n<li>rpm 是底层工具，用于直接处理 RPM 包，适合手动管理。</li>\n<li>yum 是高级工具，能自动处理依赖关系，提供更简洁的包管理体验，适合日常使用。</li>\n</ul>\n<h2 id=\"62-deb系列工具\"><a class=\"markdownIt-Anchor\" href=\"#62-deb系列工具\">#</a> 6.2 DEB 系列工具</h2>\n<p>DEB 系列工具是基于 Debian 包管理系统的，主要用于 Debian 及其衍生版（如 Ubuntu、Mint 等）。常见工具包括 apt, apt-get, dpkg 等。</p>\n<h3 id=\"apt-get\"><a class=\"markdownIt-Anchor\" href=\"#apt-get\">#</a> apt-get</h3>\n<p>apt-get 是 apt 的前身，是基于 Debian 的包管理工具，功能和 apt 类似，但不如 apt 用户友好。它提供更多的高级选项，适合脚本自动化使用。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update                        <span class=\"token comment\"># 更新软件源列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-cache</span> search <span class=\"token operator\">&lt;</span>keyword<span class=\"token operator\">></span>            <span class=\"token comment\"># 搜索软件包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sudo</span> apt-file search <span class=\"token operator\">&lt;</span>keyword<span class=\"token operator\">></span>             <span class=\"token comment\"># 搜索软件包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>             <span class=\"token comment\"># 安装软件包</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>              <span class=\"token comment\"># 删除软件包（保留配置文件）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token parameter variable\">--purge</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>      <span class=\"token comment\"># 删除软件包（删除配置文件）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>          <span class=\"token comment\"># 自动删除依赖关系</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove <span class=\"token parameter variable\">--purge</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>  <span class=\"token comment\"># 自动删除依赖关系并删除配置文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> clean                         <span class=\"token comment\"># 清理缓存</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoclean                     <span class=\"token comment\"># 自动清理缓存</span></pre></td></tr></table></figure><h3 id=\"apt-advanced-package-tool\"><a class=\"markdownIt-Anchor\" href=\"#apt-advanced-package-tool\">#</a> apt (Advanced Package Tool)</h3>\n<p>apt 是 Ubuntu 和其他基于 Debian 系统中常用的包管理器，简化了软件包的安装、更新和删除过程，并处理依赖关系。相较于 apt-get，apt 提供了更好的用户界面和更多易用的功能。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update                                       <span class=\"token comment\">#列出所有可更新的软件清单命令：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade                                      <span class=\"token comment\">#升级软件包：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">apt</span> list <span class=\"token parameter variable\">--upgradable</span>                                 <span class=\"token comment\">#列出可更新的软件包及版本信息：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> full-upgrade                                 <span class=\"token comment\">#升级软件包，升级前先删除需要更新软件包：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>                       <span class=\"token comment\">#安装指定的软件命令：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package_<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token operator\">&lt;</span>package_<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> <span class=\"token operator\">&lt;</span>package_<span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>></span>  <span class=\"token comment\">#安装多个软件包：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>                        <span class=\"token comment\">#更新指定的软件命令：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> show <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>                          <span class=\"token comment\">#显示软件包具体信息，例如：版本号，安装大小，依赖关系等等：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> remove <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>                        <span class=\"token comment\">#删除软件包命令：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove                                   <span class=\"token comment\">#清理不再使用的依赖和库文件: </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> purge <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span>                         <span class=\"token comment\">#移除软件包及配置文件: </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> search <span class=\"token operator\">&lt;</span>keyword<span class=\"token operator\">></span>                             <span class=\"token comment\">#查找软件包命令</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">apt</span> list <span class=\"token parameter variable\">--installed</span>                                  <span class=\"token comment\">#列出所有已安装的包：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">apt</span> list --all-versions                               <span class=\"token comment\">#列出所有已安装的包的版本信息：</span></pre></td></tr></table></figure><h3 id=\"dpkg-debian-package-manager\"><a class=\"markdownIt-Anchor\" href=\"#dpkg-debian-package-manager\">#</a> dpkg (Debian Package Manager)</h3>\n<p>dpkg 是 Ubuntu 和其他基于 Debian 系统的底层包管理工具，可以直接处理 .deb 软件包。类似于 rpm，dpkg 不会自动处理依赖关系。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> dpkg <span class=\"token parameter variable\">-i</span> package_name.deb    <span class=\"token comment\">#安装一个.deb 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">sudo</span> dpkg <span class=\"token parameter variable\">-r</span> package_name        <span class=\"token comment\">#卸载一个软件包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sudo</span> dpkg <span class=\"token parameter variable\">-P</span> package_name        <span class=\"token comment\">#完全删除一个软件包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  dpkg <span class=\"token parameter variable\">-l</span>                          <span class=\"token comment\">#列出已安装的包</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  dpkg <span class=\"token parameter variable\">-L</span> package_name             <span class=\"token comment\">#列出一个包提供的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  dpkg <span class=\"token parameter variable\">-S</span> file_name                <span class=\"token comment\">#查找一个文件属于哪个包</span></pre></td></tr></table></figure><h3 id=\"apt-get-apt-dpkg的联系与区别\"><a class=\"markdownIt-Anchor\" href=\"#apt-get-apt-dpkg的联系与区别\">#</a> apt-get, apt, dpkg 的联系与区别</h3>\n<p>apt-get、apt 和 dpkg 是 Ubuntu 和其他 Debian 系统中用于软件包管理的工具，它们之间有着密切的联系，同时也有一些关键的区别。</p>\n<p>（1）联系</p>\n<ul>\n<li>\n<p>包管理体系：它们都属于 Debian 包管理系统，用于处理 .deb 格式的软件包。</p>\n</li>\n<li>\n<p>功能互补：这三者的功能可以相互补充，通常可以结合使用。例如，你可以使用 dpkg 安装一个下载的 .deb 包，然后使用 apt 或 apt-get 来解决任何依赖关系。</p>\n</li>\n<li>\n<p>依赖关系：apt 和 apt-get 可以自动处理软件包的依赖关系，而 dpkg 则不具备这个能力。</p>\n</li>\n</ul>\n<p>（2）区别</p>\n<ul>\n<li>\n<p>apt-get：是一个较旧的工具，主要用于软件包的安装、更新和删除，提供更细致的控制和高级选项，适合脚本和自动化任务。</p>\n</li>\n<li>\n<p>apt：是较新的命令行工具，提供了更友好的用户界面和输出格式，旨在简化常用的包管理操作。它集成了 apt-get 和 apt-cache 的功能，因此在许多情况下可以替代这两个工具。</p>\n</li>\n<li>\n<p>dpkg：是底层的包管理工具，用于直接安装、删除和管理 .deb 包。它不处理依赖关系，需要手动解决。</p>\n</li>\n</ul>\n<p>（3）总结</p>\n<ul>\n<li>apt 是最推荐的日常使用工具，提供了用户友好的界面。</li>\n<li>apt-get 适合需要更多控制的场景，如自动化脚本。</li>\n<li>dpkg 是底层工具，用于直接管理 .deb 包，不处理依赖关系。</li>\n</ul>\n<h2 id=\"63-通用工具\"><a class=\"markdownIt-Anchor\" href=\"#63-通用工具\">#</a> 6.3 通用工具</h2>\n<p>wget：虽然不是包管理器，但 wget 是一个通用的命令行工具，主要用于从网络上下载文件。在下载软件包、更新文件时，它可以和包管理器一起使用。例如，在没有直接安装源的情况下，你可以用 wget 下载 .deb 或 .rpm 文件，然后再使用相应的包管理器进行安装。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span>  <span class=\"token comment\"># 下载文件</span></pre></td></tr></table></figure><h2 id=\"64-在ubuntu中的使用说明\"><a class=\"markdownIt-Anchor\" href=\"#64-在ubuntu中的使用说明\">#</a> 6.4 在 Ubuntu 中的使用说明</h2>\n<p>在 Ubuntu 中，主要使用的包管理工具是 apt 和 dpkg：</p>\n<ul>\n<li>\n<p>apt：用于处理软件包的安装、更新和删除，一般来说用户主要使用 apt 来管理软件包。例如，安装软件包的基本命令是 sudo apt install &lt;package_name&gt;，更新系统的软件包使用 sudo apt update 和 sudo apt upgrade。</p>\n</li>\n<li>\n<p>dpkg：当你手动下载 .deb 文件时，dpkg 用于安装这些文件。可以用 sudo dpkg -i &lt;package_name&gt;.deb 来安装软件包。如果遇到依赖问题，可以随后运行 sudo apt --fix-broken install 来修复。</p>\n</li>\n</ul>\n<p>总结来说，yum、rpm 是用于 Red Hat 系的包管理工具，而 apt、apt-get、dpkg 是用于 Debian 系的包管理工具。在 Ubuntu 中，常用 apt 来简化软件包管理。</p>\n<h1 id=\"八-网络相关\"><a class=\"markdownIt-Anchor\" href=\"#八-网络相关\">#</a> 八、网络相关</h1>\n<h2 id=\"81-ping命令\"><a class=\"markdownIt-Anchor\" href=\"#81-ping命令\">#</a> 8.1 ping 命令</h2>\n<p>不管在 windows 平台，还是在 linux 平台，ping 都是非常常用的网络命令；ping 命令通过 ICMP（Internet 控制消息协议）工作；ping 可以用来测试本机与目标主机是否联通、联通速度如何、稳定性如何。</p>\n<p>当使用 “ping” 命令时，您的设备会向主机设备发送请求并等待建立连接。 ping 命令输出包含有关数据包的信息以及每个数据包到达主机所花费的时间。终端继续打印响应，直到通信中断。</p>\n<p>首先，检查 “ping” 命令的基本语法：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token function\">hostname</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> ember@ember-Victus-by-HP-Laptop:/$ <span class=\"token function\">ping</span> www.baidu.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  PING www.baidu.com<span class=\"token punctuation\">(</span>localhost <span class=\"token punctuation\">(</span><span class=\"token number\">2409</span>:8c00:6c21:104f:0:ff:b03f:3ae<span class=\"token punctuation\">))</span> <span class=\"token number\">56</span> data bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">64</span> 字节，来自 localhost <span class=\"token punctuation\">(</span><span class=\"token number\">2409</span>:8c00:6c21:104f:0:ff:b03f:3ae<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">50</span> 时间<span class=\"token operator\">=</span><span class=\"token number\">27.6</span> 毫秒</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">64</span> 字节，来自 localhost <span class=\"token punctuation\">(</span><span class=\"token number\">2409</span>:8c00:6c21:104f:0:ff:b03f:3ae<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">50</span> 时间<span class=\"token operator\">=</span><span class=\"token number\">32.8</span> 毫秒</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">64</span> 字节，来自 localhost <span class=\"token punctuation\">(</span><span class=\"token number\">2409</span>:8c00:6c21:104f:0:ff:b03f:3ae<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">50</span> 时间<span class=\"token operator\">=</span><span class=\"token number\">29.4</span> 毫秒</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">64</span> 字节，来自 localhost <span class=\"token punctuation\">(</span><span class=\"token number\">2409</span>:8c00:6c21:104f:0:ff:b03f:3ae<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">50</span> 时间<span class=\"token operator\">=</span><span class=\"token number\">39.1</span> 毫秒</pre></td></tr></table></figure><p>上面的输出显示了各种信息：</p>\n<ul>\n<li>\n<p>icmp_seq：数据包的序列号。如果是第一个数据包，则 icmp_seq 编号将为 1。</p>\n</li>\n<li>\n<p>ttl：ttl 代表 “Time to Live”，ttl 数字表示数据包在被丢弃之前到达目的地所需的跳数（路由器）。</p>\n</li>\n<li>\n<p>时间：数据包到达目的地然后返回主机设备所需的时间。</p>\n</li>\n</ul>\n<p>要停止 ping 过程，请按 “Ctrl C”，该命令将显示发送 / 接收的数据包数量、丢失的数据包数量和时间。</p>\n<p>如果没有收到 ping 回复，则表明您的设备和主机服务器之间没有网络连接。</p>\n<h2 id=\"82-如何检查本地网络状态\"><a class=\"markdownIt-Anchor\" href=\"#82-如何检查本地网络状态\">#</a> 8.2 如何检查本地网络状态</h2>\n<p>最快的方法是：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><h1 id=\"九-进程相关\"><a class=\"markdownIt-Anchor\" href=\"#九-进程相关\">#</a> 九、进程相关</h1>\n<h2 id=\"91-查看进程列表ps\"><a class=\"markdownIt-Anchor\" href=\"#91-查看进程列表ps\">#</a> 9.1 查看进程列表（ps）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span>         //查看所有正在运行的进程</pre></td></tr></table></figure><h2 id=\"92-结束进程kill\"><a class=\"markdownIt-Anchor\" href=\"#92-结束进程kill\">#</a> 9.2 结束进程（kill）</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> xxx       //杀死该进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> xxx    //强制杀死该进程</pre></td></tr></table></figure><h1 id=\"其他常用命令\"><a class=\"markdownIt-Anchor\" href=\"#其他常用命令\">#</a> 其他常用命令</h1>\n<h2 id=\"find\"><a class=\"markdownIt-Anchor\" href=\"#find\">#</a> find</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.c\"</span>     //将目前目录及其子目录下所有延伸档名是 c 的文件列出来</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f         //将目前目录其其下子目录中所有一般文件列出</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-ctime</span> <span class=\"token parameter variable\">-20</span>      //将目前目录及其子目录下所有最近 <span class=\"token number\">20</span> 天内更新过的文件列出</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">find</span> /var/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-mtime</span> +7 <span class=\"token parameter variable\">-ok</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>     //查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-perm</span> <span class=\"token number\">644</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>       //查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> <span class=\"token number\">0</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>         //为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径</pre></td></tr></table></figure><h2 id=\"whereis\"><a class=\"markdownIt-Anchor\" href=\"#whereis\">#</a> whereis</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">whereis</span> <span class=\"token function\">ls</span>             //将和ls文件相关的文件都查找出来</pre></td></tr></table></figure><h2 id=\"which\"><a class=\"markdownIt-Anchor\" href=\"#which\">#</a> which</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>说明：which指令会在环境变量<span class=\"token environment constant\">$PATH</span>设置的目录里查找符合条件的文件。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">which</span> <span class=\"token function\">bash</span>             //查看指令<span class=\"token string\">\"bash\"</span>的绝对路径</pre></td></tr></table></figure><h2 id=\"grep\"><a class=\"markdownIt-Anchor\" href=\"#grep\">#</a> grep</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">\"the\"</span> demo_file              //在文件中查找字符串<span class=\"token punctuation\">(</span>不区分大小写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-A</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">\"example\"</span> demo_text     //输出成功匹配的行，以及该行之后的三行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-r</span> <span class=\"token string\">\"ramesh\"</span> *                   //在一个文件夹中递归查询包含指定字符串的文件</pre></td></tr></table></figure>",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://qianqiu-cell.github.io/2024/10/03/linux/Linux_install/",
            "url": "http://qianqiu-cell.github.io/2024/10/03/linux/Linux_install/",
            "title": "在移动硬盘安装Ubuntu系统",
            "date_published": "2024-10-02T16:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUVTNHkxUzdSRC8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljayZhbXA7dmRfc291cmNlPWUwMTE3MmVhMjkyYzFjNjA1YjM0NjEwMWQ3MDA2YzYx\">https://www.bilibili.com/video/BV1ES4y1S7RD/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=e01172ea292c1c605b346101d7006c61</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhMNDExcjdwMi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1lMDExNzJlYTI5MmMxYzYwNWIzNDYxMDFkNzAwNmM2MQ==\">https://www.bilibili.com/video/BV1hL411r7p2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e01172ea292c1c605b346101d7006c61</span></p>\n<ul>\n<li>目前安装的 <code>Ubuntu</code>  版本为 <code>Ubuntu 20.04.6 LTS (Focal Fossa)</code> ，镜像地址为: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWxlYXNlcy51YnVudHUuY29tL2ZvY2FsLw==\">https://releases.ubuntu.com/focal/</span></li>\n<li>使用 <code>rufus</code>  创建 <code>USB</code>  启动盘，官方网站为: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWZ1cy5pZS96aC8=\">https://rufus.ie/zh/</span>。</li>\n<li>使用 <code>DiskGenius</code>  进行分区管理，下载地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNrZ2VuaXVzLmNuL2Rvd25sb2FkLnBocA==\">https://diskgenius.cn/download.php</span></li>\n</ul>\n<h1 id=\"step-1-制作u盘启动盘\"><a class=\"markdownIt-Anchor\" href=\"#step-1-制作u盘启动盘\">#</a> step 1: 制作 U 盘启动盘</h1>\n<p>  打开 <code>Rufus</code> ，<strong>设备选择要制作启动盘的 U 盘</strong>，通过 “选择” 按键<strong>选择所下载的 Ubuntu 镜像文件</strong>，<strong>分区类型为 GPT</strong>，<strong>目标系统类型为 UEFI (非 CSM)</strong>，<strong>文件系统类型选择 FAT32 (默认)</strong>，<strong>簇大小选择 16K 字节 (默认)</strong>。点击<strong>开始</strong>，等待制作完成，之后便可关闭 <code>Rufus</code> 。 <code>Rufus</code>  的配置界面如下图所示：</p>\n<p><img data-src=\"/images/linux/Linux_install/1.1.png\" alt=\"\"></p>\n<h1 id=\"step-2-设置分区\"><a class=\"markdownIt-Anchor\" href=\"#step-2-设置分区\">#</a> step 2: 设置分区</h1>\n<p>  打开 <code>DiskGenius</code>  软件，进行分区管理。</p>\n<p>  首先设置 <code>EFI</code>  分区，文件系统类型选择 <code>EFI system partition</code> ，大小选择 <code>&gt;=1GB (2GB)</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/linux/Linux_install/2.1.png\" alt=\"\"></p>\n<p>  之后设置 <code>swap</code>  分区，文件系统类型选择 <code>Linux swap partition</code> ，大小选择 <code>&gt;=16GB (32GB)</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/linux/Linux_install/2.2.png\" alt=\"\"></p>\n<p>  之后设置 <code>/</code>  分区，文件系统类型选择 <code>Ext4 (Linux Data)</code> ，大小选择 <code>&gt;=40GB (200GB)</code> ，卷标选择 <code>/</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/linux/Linux_install/2.3.png\" alt=\"\"></p>\n<p>  最后设置 <code>home</code>  分区，文件系统类型选择 <code>Ext4 (Linux Data)</code> ，大小选择 <code>&gt;=425GB (600GB)</code> ，卷标选择 <code>/home</code> ，配置的界面如下：</p>\n<p><img data-src=\"/images/linux/Linux_install/2.4.png\" alt=\"\"></p>\n<p>  如果移动硬盘还有剩余空间，则可以作为常规 <code>Windows</code>  移动硬盘使用，文件系统类型选择 <code>NTFS (MS Basic Data)</code> ，大小选择剩余的大小，配置的界面如下：</p>\n<p><img data-src=\"/images/linux/Linux_install/2.5.png\" alt=\"\"></p>\n<p>  所有设置完成的界面如下所示</p>\n<p><img data-src=\"/images/linux/Linux_install/2.6.png\" alt=\"\"></p>\n<p>  完成设置后即可点击 <code>DiskGenius</code>  界面左上角的 “保存更改” 按键，开始创建分区。</p>\n<h1 id=\"step-3-安装ubuntu系统\"><a class=\"markdownIt-Anchor\" href=\"#step-3-安装ubuntu系统\">#</a> step 3: 安装 Ubuntu 系统</h1>\n<p>  在 <code>Windows</code>  的恢复菜单中选择重新启动系统，则系统重新启动时会自动进入引导菜单，此时选择<strong> U 盘启动</strong>，进入 U 盘系统。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.1.png\" alt=\"\"></p>\n<p><img data-src=\"/images/linux/Linux_install/3.1.5.png\" alt=\"\"></p>\n<p>  选择第一个 Ubuntu 选项，进入 Ubuntu 的安装界面。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.2.png\" alt=\"\"></p>\n<p>  首先在左边选择中文简体，右边选择安装 Ubuntu。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.3.png\" alt=\"\"></p>\n<p>  键盘布局选择默认，点击继续。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.4.png\" alt=\"\"></p>\n<p>  现在一共有 2 种安装模式可供选择：</p>\n<ul>\n<li>正常安装（我们需要选择的）：您可以安装功能强大的桌面所需的所有应用程序，包括：Web 浏览器、办公套件、游戏和媒体播放器等。</li>\n<li>最小安装：可以安装最小的桌面版本，该版本仅具有 Web 浏览器和一些基本实用程序。</li>\n</ul>\n<p>  还可以在安装 <code>Ubuntu 20.04 LTS</code>  桌面版的同时勾选「安装 Ubuntu 时下载更新」选项以下载并应用更新（推荐选上），也可以选择是否同时（不推荐）「为图形或无线硬件，以及其它媒体格式安装第三方软件」。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.5.png\" alt=\"\"></p>\n<p>  在安装类型界面，一定一定要选择<strong>其他选项</strong>。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.6.png\" alt=\"\"></p>\n<p>  在手动安装界面，依次配置在 <code>stpe 2</code>  中设置的四个分区</p>\n<ul>\n<li>首先是<strong> EFI 区</strong>，大小默认，用于选择<strong> EFI 系统分区</strong>；</li>\n<li>下面是<strong>交换分区</strong>，大小默认，用于选择<strong>交换空间</strong>；</li>\n<li>然后是<strong>根目录分区</strong>，大小默认，用于选择<strong> Ext4 日志文件系统</strong>，挂载点选择 <code>/</code> ；</li>\n<li>最后是<strong> home 分区</strong>，大小默认，用于选择<strong> Ext4 日志文件系统</strong>，挂载点选择 <code>/home</code> 。</li>\n</ul>\n<p>  之后，在安装启动引导器的设备选项栏中务必选择 Ubuntu 系统的 EFI 分区，如 /dev/sda1。</p>\n<p>  完成上述设置后，点击 “现在安装”，之后连续点击两次继续，等待安装完成。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.7.jpg\" alt=\"\"><br>\n<img data-src=\"/images/linux/Linux_install/3.8.jpg\" alt=\"\"><br>\n<img data-src=\"/images/linux/Linux_install/3.9.jpg\" alt=\"\"><br>\n<img data-src=\"/images/linux/Linux_install/3.10.jpg\" alt=\"\"><br>\n<img data-src=\"/images/linux/Linux_install/3.11.jpg\" alt=\"\"></p>\n<p>  时区不需要更改，点击继续。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.12.png\" alt=\"\"></p>\n<p>  设置账户信息，密码建议设置简单一点，并选择自动登录选项，点击继续。</p>\n<p><img data-src=\"/images/linux/Linux_install/3.13.png\" alt=\"\"></p>\n<p>  之后即可完成 Ubuntu 系统的安装。</p>\n<h1 id=\"四-卸载ubuntu系统\"><a class=\"markdownIt-Anchor\" href=\"#四-卸载ubuntu系统\">#</a> 四、卸载 Ubuntu 系统</h1>\n<p>首先在 计算机管理 - 磁盘管理中删除其他分区，其中第一个 EFI 分区无法删除，可是在 power shell 中使用如下命令进行删除：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> PS C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>system3<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> diskpart</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Microsoft DiskPart 版本 <span class=\"token number\">10.0</span>.22621.1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>在计算机上: LAPTOP-LIA4BDDR</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DISKPART<span class=\"token operator\">></span> list disk</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  磁盘 <span class=\"token comment\">###  状态           大小     可用     Dyn  Gpt</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  --------  -------------  -------  -------  ---  ---</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  磁盘 <span class=\"token number\">0</span>    联机              <span class=\"token number\">476</span> GB     <span class=\"token number\">8</span> MB        *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  磁盘 <span class=\"token number\">1</span>    联机              <span class=\"token number\">931</span> GB  <span class=\"token number\">2048</span> KB        *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  磁盘 <span class=\"token number\">2</span>    联机              <span class=\"token number\">953</span> GB   <span class=\"token number\">951</span> GB        *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  磁盘 <span class=\"token number\">3</span>    联机               <span class=\"token number\">29</span> GB      <span class=\"token number\">0</span> B        *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>DISKPART<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> disk <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>磁盘 <span class=\"token number\">2</span> 现在是所选磁盘。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>DISKPART<span class=\"token operator\">></span> list partition</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  分区 <span class=\"token comment\">###       类型              大小     偏移量</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  -------------  ----------------  -------  -------</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  分区      <span class=\"token number\">1</span>    系统                <span class=\"token number\">2053</span> MB  <span class=\"token number\">1024</span> KB</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>DISKPART<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> partition <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>分区 <span class=\"token number\">1</span> 现在是所选分区。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>DISKPART<span class=\"token operator\">></span> delete partition override</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>DiskPart 成功地删除了所选分区。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>DISKPART<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"其他问题\"><a class=\"markdownIt-Anchor\" href=\"#其他问题\">#</a> 其他问题</h1>\n<h2 id=\"1-启动项的问题\"><a class=\"markdownIt-Anchor\" href=\"#1-启动项的问题\">#</a> 1、启动项的问题</h2>\n<p>第一次安装高版本 24.04Ubuntu 系统时，可以实现</p>\n<ul>\n<li>不插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘时选择进入 Ubuntu 系统或是 Windows 系统。</li>\n</ul>\n<p>但是在第二次安装 20.04 版本的 Ubuntu 后，无法实现上述启动选项，只能配合<strong> EasyUEFI 软件的管理 EFI 启动项页面</strong>（文件已保存至百度网盘），实现如下的启动功能：</p>\n<p><img data-src=\"/images/linux/Linux_install/4.1.png\" alt=\"\"></p>\n<p>（1）当 Windows Boot Manager 为启动序列首个选项时（目前采用的）</p>\n<ul>\n<li>不插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘时自动进入 Windows 系统；</li>\n<li>插入移动硬盘，在 Windows 系统的 “恢复” 选项卡中启动电脑，可以进入选择进入 Ubuntu 系统或是 Windows 系统的页面。</li>\n</ul>\n<p>（2）当 Ubuntu 为启动序列首个选项时</p>\n<ul>\n<li>不插入移动硬盘是会进入 GNU GRUB 命令行界面，输入 exit 后可进入 Windows 系统；</li>\n<li>插入移动硬盘后会进入选择 Ubuntu 系统或是 Windows 系统的界面。</li>\n</ul>\n<p><img data-src=\"/images/linux/Linux_install/4.2.jpg\" alt=\"\"></p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}